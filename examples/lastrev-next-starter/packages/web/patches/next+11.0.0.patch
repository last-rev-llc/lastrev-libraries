diff --git a/node_modules/next/dist/export/index.js b/node_modules/next/dist/export/index.js
index 3f3a0eb..bf515e3 100644
--- a/node_modules/next/dist/export/index.js
+++ b/node_modules/next/dist/export/index.js
@@ -11,7 +11,7 @@ if((_prerenderManifest=prerenderManifest)!=null&&_prerenderManifest.dynamicRoute
 const outDir=options.outdir;if(outDir===(0,_path.join)(dir,'public')){throw new Error(`The 'public' directory is reserved in Next.js and can not be used as the export out directory. https://nextjs.org/docs/messages/can-not-output-to-public`);}if(outDir===(0,_path.join)(dir,'static')){throw new Error(`The 'static' directory is reserved in Next.js and can not be used as the export out directory. https://nextjs.org/docs/messages/can-not-output-to-static`);}await(0,_recursiveDelete.recursiveDelete)((0,_path.join)(outDir));await _fs.promises.mkdir((0,_path.join)(outDir,'_next',buildId),{recursive:true});(0,_fs.writeFileSync)((0,_path.join)(distDir,_constants2.EXPORT_DETAIL),JSON.stringify({version:1,outDirectory:outDir,success:false}),'utf8');// Copy static directory
 if(!options.buildExport&&(0,_fs.existsSync)((0,_path.join)(dir,'static'))){if(!options.silent){Log.info('Copying "static" directory');}await nextExportSpan.traceChild('copy-static-directory').traceAsyncFn(()=>(0,_recursiveCopy.recursiveCopy)((0,_path.join)(dir,'static'),(0,_path.join)(outDir,'static')));}// Copy .next/static directory
 if(!options.buildExport&&(0,_fs.existsSync)((0,_path.join)(distDir,_constants2.CLIENT_STATIC_FILES_PATH))){if(!options.silent){Log.info('Copying "static build" directory');}await nextExportSpan.traceChild('copy-next-static-directory').traceAsyncFn(()=>(0,_recursiveCopy.recursiveCopy)((0,_path.join)(distDir,_constants2.CLIENT_STATIC_FILES_PATH),(0,_path.join)(outDir,'_next',_constants2.CLIENT_STATIC_FILES_PATH)));}// Get the exportPathMap from the config file
-if(typeof nextConfig.exportPathMap!=='function'){if(!options.silent){Log.info(`No "exportPathMap" found in "${_constants2.CONFIG_FILE}". Generating map from "./pages"`);}nextConfig.exportPathMap=async defaultMap=>{return defaultMap;};}const{i18n,images:{loader='default'}}=nextConfig;if(i18n&&!options.buildExport){throw new Error(`i18n support is not compatible with next export. See here for more info on deploying: https://nextjs.org/docs/deployment`);}if(!options.buildExport){const{isNextImageImported}=await nextExportSpan.traceChild('is-next-image-imported').traceAsyncFn(()=>_fs.promises.readFile((0,_path.join)(distDir,_constants2.EXPORT_MARKER),'utf8').then(text=>JSON.parse(text)).catch(()=>({})));if(isNextImageImported&&loader==='default'&&!_ciInfo.hasNextSupport){throw new Error(`Image Optimization using Next.js' default loader is not compatible with \`next export\`.
+if(typeof nextConfig.exportPathMap!=='function'){if(!options.silent){Log.info(`No "exportPathMap" found in "${_constants2.CONFIG_FILE}". Generating map from "./pages"`);}nextConfig.exportPathMap=async defaultMap=>{return defaultMap;};}const{i18n,images:{loader='default'}}=nextConfig;if(!options.buildExport){const{isNextImageImported}=await nextExportSpan.traceChild('is-next-image-imported').traceAsyncFn(()=>_fs.promises.readFile((0,_path.join)(distDir,_constants2.EXPORT_MARKER),'utf8').then(text=>JSON.parse(text)).catch(()=>({})));if(isNextImageImported&&loader==='default'&&!_ciInfo.hasNextSupport){throw new Error(`Image Optimization using Next.js' default loader is not compatible with \`next export\`.
   Possible solutions:
     - Use \`next start\` to run a server, which includes the Image Optimization API.
     - Use any provider which supports Image Optimization (like Vercel).

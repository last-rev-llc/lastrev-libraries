"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy("The URL that specifies the behaviour of this scalar." url: String!) on SCALAR
"Date custom scalar type"
scalar Date
"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON
type Asset {
  id: String
  url: String
  fileName: String
  extension: String
  title: String
  width: String
  height: String
  description: String
}
type Media implements Content {
  source: String
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  title: String
  description: String
  file: Asset
  variant: String
  internalTitle: String
  placeholder: Media
  assetURL: String
  asset: Media
  tablet: Media
  mobile: Media
  fileTablet: Asset
  fileMobile: Asset
}
type Location {
  lat: String
  lon: String
}
type RichText {
  id: String
  json: JSON
  links: RichTextLinks
}
type RichTextLinks {
  entries: [Content]
  assets: [Media]
}
type Theme implements Content {
  variant: String
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  internalTitle: String
  description: String
  components: JSON
  typography: JSON
}
type Locales {
  default: String!
  available: [String!]!
}
input ContentsFilter {
  contentTypes: [String]
  ids: [String]
  locale: String
  preview: Boolean
  displayType: String
}
type Query {
  page(path: String!, locale: String, preview: Boolean, site: String): Content
  paths(locales: [String!], preview: Boolean, site: String): [PagePathParams!]
  content(id: String!, locale: String, preview: Boolean, displayType: String): Content
  contents(filter: ContentsFilter!): [Content]
  sitemap(root: String!, locales: [String!], preview: Boolean, site: String): Sitemap
  availableLocales: Locales
}
type PagePathParam {
  slug: [String!]
}
type PagePathParams {
  params: PagePathParam!
  locale: String
}
interface Content {
  id: String
  theme: [Theme]
  animation: JSON
  sidekickLookup: JSON
}
type SitemapEntry {
  loc: String
  lastmod: String
}
type SitemapPage {
  entries: [SitemapEntry]
  loc: String
  lastmod: String
  filename: String
}
type Sitemap {
  pages: [SitemapPage]
}
type Card implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  media: [Media]
  title: String
  subtitle: String
  body: RichText
  actions: [Link]
  link: Link
}
type Collection implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  itemsVariant: String
  itemsWidth: String
  itemsSpacing: Int
  settings: JSON
  styles: JSON
  items: [CollectionItem]
  introText: Text
  itemsConnection(limit: Int, offset: Int, filter: CollectionFilterInput): CollectionItemConnection
}
type Header implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  logo: Media
  logoUrl: String
  color: String
  navigationItems: [Collection]
}
type Hero implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  title: String
  subtitle: String
  body: RichText
  backgroundAsset: Media
  backgroundColor: String
  image: [Media]
  contentWidth: String
  contentHeight: String
  overline: String
  actions: [Link]
  background: Media
}
type Link implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  manualUrl: String
  text: String
  icon: String
  iconPosition: String
  color: String
  href: String!
}
type ModuleIntegration implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  settings: JSON
}
type NavigationItem implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  manualUrl: String
  text: String
  summary: String
  media: Media
  href: String!
  subNavigation: [SubnavigationItem]
  image: Media
}
type Person implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  name: String
  jobTitle: String
  image: Media
}
type Quote implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  quote: String
  authorName: String
  authorTitle: String
  image: Media
}
type Section implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  anchorName: String
  settings: JSON
  backgroundColor: String
  contentDirection: String
  contentAlignment: String
  contentSpacing: Int
  contentWidth: String
  styles: JSON
  paddingTop: Int
  paddingBottom: Int
  paddingLeft: Int
  paddingRight: Int
  contents: [Content]
  background: Media
}
type Site implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  siteKey: String
  seo: JSON
}
type Template implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  templateName: String
  image: Media
  category: String
}
type Text implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  body: RichText
  internalTitle: String
  align: String
  color: String
  styles: JSON
}
type Blog implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  slug: String
  lr__path__: String
  title: String
  featuredMedia: Media
  pubDate: Date
  summary: String
  body: RichText
  tags: [String]
  disableBackToTop: Boolean
  seo: JSON
  relatedLinks: [Link]
  categories: [CategoryBlog]
  author: Person
  contents: [Content]
  header: Header
  footer: Content
}
type CategoryBlog implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  slug: String
  lr__path__: String
  title: String
  seo: JSON
  header: Header
  footer: Content
  contents: [Content]
  hero: Hero
}
type Page implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  slug: String
  lr__path__: String
  internalTitle: String
  title: String
  seo: JSON
  colorScheme: String
  disableBackToTop: Boolean
  header: Header
  footer: Content
  hero: Hero
  contents: [Content]
}
type AlgoliaObject {
  index: String!
  data: JSON!
}
type AlgoliaRecord implements Content {
  id: String
  theme: [Theme]
  animation: JSON
  sidekickLookup: JSON
  algoliaObjects: [AlgoliaObject]
}
type CollectionOptions {
  tags: [Option]
  topics: [Option]
}
type Option {
  label: String
  value: String
}
type ConnectionPageInfo {
  options: CollectionOptions
  allOptions: CollectionOptions
  total: Int
}
type CollectionItemConnection {
  pageInfo: ConnectionPageInfo
  items: [CollectionItem]
}
input CollectionFilterInput {
  topics: [String]
  tags: [String]
  body: String
}
union CollectionItem = Card | Link | Media | Section | NavigationItem
union SubnavigationItem = Link | NavigationItem

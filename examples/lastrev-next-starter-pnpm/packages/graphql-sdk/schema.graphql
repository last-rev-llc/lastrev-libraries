directive @extends on INTERFACE | OBJECT

directive @external(reason: String) on FIELD_DEFINITION | OBJECT

directive @key(fields: _FieldSet!, resolvable: Boolean = true) on INTERFACE | OBJECT

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

directive @tag(name: String!) on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

type AlgoliaObject {
  data: JSON!
  index: String!
}

type AlgoliaRecord implements Content {
  algoliaObjects: [AlgoliaObject]
  animation: JSON
  id: String
  sidekickLookup: JSON
  theme: [Theme]
}

type Asset {
  description: String
  extension: String
  fileName: String
  height: String
  id: String
  svgContent: String
  title: String
  url: String
  width: String
}

type Block implements Content {
  actions: [Link]
  animation: JSON
  asset: Media
  backgroundColor: String
  backgroundImage: Media
  body: RichText
  id: String
  inheritTopBGOverlap: Boolean
  internalTitle: String
  introText: Text
  link: Link
  mediaItems: [Media]
  overline: String
  sidekickLookup: JSON
  subtitle: String
  supplementalContent: Content
  theme: [Theme]
  title: String
  variant: String
}

type Blog implements Content {
  aboutText: RichText
  animation: JSON
  author: Person
  body: RichText
  breadcrumbs: [Link]
  categories: [CategoryBlog]
  disableBackToTop: Boolean
  featuredMedia: Media
  footer: Footer
  header: Header
  hero: Content
  id: String
  jsonLd: JSON
  lr__path__: String
  mediaContactEmail: String
  mediaContactName: String
  mediaContactPhone: JSON
  path: String
  promoImage: Media
  promoLinkText: String
  promoSummary: String
  pubDate: Date
  relatedItems: Content
  seo: JSON
  sidekickLookup: JSON
  slug: String
  tags: [String]
  theme: [Theme]
  title: String
}

type Card implements Content {
  actions: [Link]
  animation: JSON
  aspectRatio: String
  body: RichText
  id: String
  internalTitle: String
  jsonLd: JSON
  link: Link
  media: [Media]
  overline: String
  sidekickLookup: JSON
  subtitle: String
  theme: [Theme]
  title: String
  variant: String
}

type CategoryBlog implements Content {
  animation: JSON
  body: RichText
  contents: [Content]
  footer: Footer
  header: Header
  hero: Hero
  id: String
  lr__path__: String
  path: String
  promoImage: Media
  promoSummary: String
  seo: JSON
  sidekickLookup: JSON
  slug: String
  theme: [Theme]
  title: String
}

type Collection implements Content {
  algoliaSettings: JSON
  animation: JSON
  backgroundColor: String
  backgroundImage: Media
  carouselAutoPlay: Boolean
  carouselBreakpoints: [String]
  id: String
  images: [Media]
  inheritTopBGOverlap: Boolean
  internalTitle: String
  introText: Text
  isCarouselDesktop: Boolean
  isCarouselMobile: Boolean
  isCarouselTablet: Boolean
  items: [CollectionItem]
  itemsAspectRatio: String
  itemsConnection(filter: CollectionFilterInput, limit: Int, offset: Int): CollectionItemConnection
  itemsPerRow: Int
  itemsVariant: String
  numItems: Int
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

type CollectionDynamic implements Content {
  algoliaSettings: JSON
  animation: JSON
  backgroundColor: String
  backgroundImage: Media
  carouselAutoPlay: Boolean
  carouselBreakpoints: [String]
  filtersPlacement: String
  id: String
  inheritTopBGOverlap: Boolean
  internalTitle: String
  introText: Text
  isCarouselDesktop: Boolean
  isCarouselMobile: Boolean
  isCarouselTablet: Boolean
  items: [CollectionDynamicItem]
  itemsAspectRatio: String
  itemsConnection(filter: CollectionDynamicFilterInput, limit: Int, offset: Int): CollectionDynamicItemConnection
  itemsPerRow: Int
  itemsVariant: String
  numItems: Int
  settings: JSON
  showFilters: Boolean
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

type CollectionDynamicConnectionPageInfo {
  allOptions: CollectionDynamicOptions
  options: CollectionDynamicOptions
  total: Int
}

input CollectionDynamicFilterInput {
  body: String
  sector: [String]
  tags: [String]
  topics: [String]
}

union CollectionDynamicItem = Card

type CollectionDynamicItemConnection {
  items: [CollectionDynamicItem]
  pageInfo: CollectionDynamicConnectionPageInfo
}

type CollectionDynamicOption {
  label: String
  value: String
}

type CollectionDynamicOptions {
  sector: [CollectionDynamicOption]
  tags: [CollectionDynamicOption]
  topics: [CollectionDynamicOption]
}

type CollectionExpandable implements Content {
  animation: JSON
  backgroundColor: String
  backgroundImage: Media
  id: String
  internalTitle: String
  introText: Text
  items: [CollectionExpandableItem]
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

type CollectionExpandableItem implements Content {
  animation: JSON
  body: RichText
  bodyRte: JSON
  content: Content
  id: String
  internalTitle: String
  sidekickLookup: JSON
  theme: [Theme]
  title: String
  variant: String
}

input CollectionFilterInput {
  body: String
  sector: [String]
  tags: [String]
  topics: [String]
}

union CollectionItem = Card

type CollectionItemConnection {
  items: [CollectionItem]
  pageInfo: ConnectionPageInfo
}

type CollectionOptions {
  sector: [Option]
  tags: [Option]
  topics: [Option]
}

type ConnectionPageInfo {
  allOptions: CollectionOptions
  options: CollectionOptions
  total: Int
}

interface Content {
  animation: JSON
  id: String
  sidekickLookup: JSON
  theme: [Theme]
}

input ContentsFilter {
  contentTypes: [String]
  displayType: String
  ids: [String]
  locale: String
  preview: Boolean
}

"""Date custom scalar type"""
scalar Date

type ElementForm implements Content {
  address: JSON
  animation: JSON
  backgroundColor: String
  backgroundImage: Media
  breadcrumbs: [Link]
  confirmationPath: String
  contents: [Content]
  email: String
  footer: Footer
  footerDisclaimerOverride: RichText
  formDisclaimerText: RichText
  formLayout: String
  header: Header
  hero: Hero
  hubspotFormId: String
  hubspotPortalId: String
  id: String
  internalTitle: String
  introText: Text
  lr__path__: String
  path: String
  seo: JSON
  sidekickLookup: JSON
  slug: String
  theme: [Theme]
  variant: String
}

type ElementVideo implements Content {
  altText: String
  animation: JSON
  asset: Media
  assetURL: String
  autoplay: Boolean
  id: String
  internalTitle: String
  mobile: Media
  placeholder: Media
  sidekickLookup: JSON
  tablet: Media
  theme: [Theme]
  title: String
  variant: String
}

type Footer implements Content {
  animation: JSON
  backgroundColor: String
  copyrightDisclaimer: RichText
  disclaimerText: RichText
  hasSocialLinks: Boolean
  id: String
  internalTitle: String
  introContents: [Content]
  legalLinks: [Link]
  logo: Media
  logoUrl: Link
  navigationItems: [NavigationItem]
  sidekickLookup: JSON
  socialLinks: [Link]
  theme: [Theme]
  variant: String
}

type Header implements Content {
  animation: JSON
  backgroundColor: String
  ctaItems: [Link]
  hasCtaItems: Boolean
  id: String
  internalTitle: String
  logo: Media
  logoUrl: Link
  navigationItems: [NavigationItem]
  sidekickLookup: JSON
  supernavIcon: Media
  supernavLink: Link
  supernavMobileText: String
  supernavText: RichText
  theme: [Theme]
  variant: String
}

type Hero implements Content {
  actions: [Link]
  animation: JSON
  background: Media
  backgroundColor: String
  body: RichText
  bottomContent: Content
  hideBreadcrumbs: Boolean
  id: String
  internalTitle: String
  overline: String
  showFullImage: Boolean
  sideImageItems: [Media]
  sidekickLookup: JSON
  subtitle: String
  theme: [Theme]
  title: String
  variant: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Link implements Content {
  altText: String
  animation: JSON
  color: String
  href: String!
  icon: String
  iconPosition: String
  id: String
  internalTitle: String
  manualUrl: String
  sidekickLookup: JSON
  target: String
  text: String
  theme: [Theme]
  variant: String
}

type Locales {
  available: [String!]!
  default: String!
}

type Location {
  lat: String
  lon: String
}

type Media implements Content {
  alt: String
  altText: String
  animation: JSON
  asset: Media
  backgroundColor: String
  description: String
  file: Asset
  fileMobile: Asset
  fileTablet: Asset
  id: String
  internalTitle: String
  mobile: Media
  sidekickLookup: JSON
  source: String
  tablet: Media
  theme: [Theme]
  title: String
  variant: String
}

type ModuleIntegration implements Content {
  animation: JSON
  id: String
  internalTitle: String
  settings: JSON
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

type NavigationItem implements Content {
  actions: [Link]
  altText: String
  animation: JSON
  href: String!
  icon: String
  iconPosition: String
  id: String
  internalTitle: String
  manualUrl: String
  navMedia: Media
  sidekickLookup: JSON
  subNavigation: [SubNavigationItem]
  summary: RichText
  text: String
  theme: [Theme]
  variant: String
}

type Option {
  label: String
  value: String
}

type Page implements Content {
  animation: JSON
  breadcrumbs: [Link]
  contents: [Content]
  disableBackToTop: Boolean
  footer: Footer
  footerDisclaimerOverride: RichText
  header: Header
  hero: Hero
  id: String
  internalTitle: String
  isHomepage: Boolean
  jsonLd: JSON
  lr__path__: String
  path: String
  promoImage: Media
  promoLinkText: String
  promoSummary: String
  seo: JSON
  sidekickLookup: JSON
  slug: String
  theme: [Theme]
  title: String
}

type PageAsset implements Content {
  address: JSON
  animation: JSON
  assetType: String
  body: RichText
  id: String
  location: String
  mainImage: Media
  name: String
  promoImage: Media
  promoSummary: String
  sector: String
  sidekickLookup: JSON
  strategy: String
  theme: [Theme]
  variant: String
}

type PagePathParam {
  slug: [String!]
}

type PagePathParams {
  locale: String
  params: PagePathParam!
}

type PageProperty implements Content {
  address: JSON
  animation: JSON
  assetType: String
  body: RichText
  breadcrumbs: [Link]
  dateAcquired: Date
  dateSold: Date
  featuredAssets: Collection
  footer: Footer
  header: Header
  hero: Content
  id: String
  imageCarousel: Collection
  images: [Media]
  jsonLd: JSON
  lr__path__: String
  mainImage: Media
  market: String
  name: String
  ncreifRegion: String
  path: String
  promoImage: Media
  promoLinkText: String
  promoSummary: String
  sector: String
  seo: JSON
  sidekickLookup: JSON
  size: String
  slug: String
  socialLinks: [Link]
  squareFootage: Int
  strategy: String
  theme: [Theme]
}

type PageResource {
  author: Person
  breadcrumbs: [Link]
  contents: [Content]
  footer: Footer
  header: Header
  hero: Hero
  jsonLd: JSON
  path: String
  subNavigation: NavigationItem
  variant: String
}

type Person implements Content {
  animation: JSON
  body: RichText
  breadcrumbs: [Link]
  department: String
  education: [String]
  email: String
  footer: Footer
  header: Header
  hero: Content
  id: String
  isPartner: Boolean
  jobTitle: String
  jsonLd: JSON
  lr__path__: String
  mainImage: Media
  name: String
  onInvestmentCommitee: Boolean
  path: String
  previousExperiences: [String]
  promoImage: Media
  promoLinkText: String
  promoSummary: String
  seo: JSON
  sidekickLookup: JSON
  slug: String
  theme: [Theme]
}

type PricingPlan {
  actions: [Link]
  bodyRTE: RichText
}

type Query {
  _service: _Service!
  availableLocales: Locales
  content(displayType: String, id: String!, locale: String, preview: Boolean): Content
  contentPreview(displayType: String, id: String!, locale: String, overrideContent: JSON): Content
  contents(filter: ContentsFilter!): [Content]
  page(locale: String, path: String!, preview: Boolean, site: String): Content
  paths(locales: [String!], preview: Boolean, site: String): [PagePathParams!]
  redirects(preview: Boolean!): [SiteRedirect]
  rewrites(preview: Boolean!): [SiteRedirect]
  sitemap(locales: [String!], preview: Boolean, root: String!, site: String): Sitemap
  sitemapIndex(preview: Boolean, site: String): Sitemap
  sitemapPage(contentType: String!, locale: String, page: Int, preview: Boolean, site: String): SitemapPage
}

type Quote {
  actions: [Link]
  image: Media
  logo: Media
}

type RichText {
  id: String
  json: JSON
  links: RichTextLinks
}

type RichTextLinks {
  assets: [Media]
  entries: [Content]
}

type Section implements Content {
  anchorName: String
  animation: JSON
  background: Media
  backgroundColor: String
  contents: [Content]
  hasBackground: Boolean
  id: String
  inheritTopBGOverlap: Boolean
  internalTitle: String
  introText: Text
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

type Settings implements Content {
  animation: JSON
  id: String
  internalTitle: String
  liveEditorSettings: JSON
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

type Site implements Content {
  animation: JSON
  id: String
  internalTitle: String
  mediaContactEmail: String
  mediaContactName: String
  mediaContactPhone: String
  newsDefaultAboutUs: RichText
  seo: JSON
  sidekickLookup: JSON
  siteKey: String
  taRealtyAddress: JSON
  taRealtyEmail: String
  taRealtyPhone: JSON
  theme: [Theme]
  variant: String
}

type SiteRedirect implements Content {
  animation: JSON
  destination: String
  id: String
  permanent: Boolean
  sidekickLookup: JSON
  source: String
  theme: [Theme]
  variant: String
}

type Sitemap {
  pages: [SitemapPage]
}

type SitemapEntry {
  lastmod: String
  loc: String
}

type SitemapPage {
  contentType: String
  entries: [SitemapEntry]
  filename: String
  lastmod: String
  loc: String
  locale: String
  page: Int
}

union SubNavigationItem = Blog | Link | NavigationItem | Page | PageProperty | Person

type Template implements Content {
  animation: JSON
  category: String
  id: String
  image: Media
  sidekickLookup: JSON
  templateName: String
  theme: [Theme]
  variant: String
}

type Text implements Content {
  align: String
  animation: JSON
  body: RichText
  id: String
  internalTitle: String
  overline: String
  sidekickLookup: JSON
  subtitle: String
  theme: [Theme]
  title: String
  titleIcon: Media
  variant: String
}

type Theme {
  variant: String
}

scalar _Any

scalar _FieldSet

type _Service {
  sdl: String
}
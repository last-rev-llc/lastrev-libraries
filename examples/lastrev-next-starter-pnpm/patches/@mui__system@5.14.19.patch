diff --git a/createStyled.js b/createStyled.js
index 4eb0fe09227cc149752c858cc12d793846e5308f..3ef482ef8b73187e993840019027703c9edf6ce0 100644
--- a/createStyled.js
+++ b/createStyled.js
@@ -2,44 +2,81 @@
 
 var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
 Object.defineProperty(exports, "__esModule", {
-  value: true
+  value: true,
 });
 exports.default = createStyled;
 exports.shouldForwardProp = shouldForwardProp;
 exports.systemDefaultTheme = void 0;
-var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
-var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
+var _objectWithoutPropertiesLoose2 = _interopRequireDefault(
+  require("@babel/runtime/helpers/objectWithoutPropertiesLoose")
+);
+var _extends2 = _interopRequireDefault(
+  require("@babel/runtime/helpers/extends")
+);
 var _styledEngine = _interopRequireWildcard(require("@mui/styled-engine"));
 var _utils = require("@mui/utils");
 var _createTheme = _interopRequireDefault(require("./createTheme"));
 var _propsToClassKey = _interopRequireDefault(require("./propsToClassKey"));
 var _styleFunctionSx = _interopRequireDefault(require("./styleFunctionSx"));
-const _excluded = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
+const _excluded = [
+  "name",
+  "slot",
+  "skipVariantsResolver",
+  "skipSx",
+  "overridesResolver",
+];
 /* eslint-disable no-underscore-dangle */
-function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
-function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
+function _getRequireWildcardCache(e) {
+  if ("function" != typeof WeakMap) return null;
+  var r = new WeakMap(),
+    t = new WeakMap();
+  return (_getRequireWildcardCache = function (e) {
+    return e ? t : r;
+  })(e);
+}
+function _interopRequireWildcard(e, r) {
+  if (!r && e && e.__esModule) return e;
+  if (null === e || ("object" != typeof e && "function" != typeof e))
+    return { default: e };
+  var t = _getRequireWildcardCache(r);
+  if (t && t.has(e)) return t.get(e);
+  var n = { __proto__: null },
+    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
+  for (var u in e)
+    if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
+      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
+      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : (n[u] = e[u]);
+    }
+  return (n.default = e), t && t.set(e, n), n;
+}
 function isEmpty(obj) {
   return Object.keys(obj).length === 0;
 }
 
 // https://github.com/emotion-js/emotion/blob/26ded6109fcd8ca9875cc2ce4564fee678a3f3c5/packages/styled/src/utils.js#L40
 function isStringTag(tag) {
-  return typeof tag === 'string' &&
-  // 96 is one less than the char code
-  // for "a" so this is checking that
-  // it's a lowercase character
-  tag.charCodeAt(0) > 96;
+  return (
+    typeof tag === "string" &&
+    // 96 is one less than the char code
+    // for "a" so this is checking that
+    // it's a lowercase character
+    tag.charCodeAt(0) > 96
+  );
 }
 const getStyleOverrides = (name, theme) => {
-  if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
+  if (
+    theme.components &&
+    theme.components[name] &&
+    theme.components[name].styleOverrides
+  ) {
     return theme.components[name].styleOverrides;
   }
   return null;
 };
-const transformVariants = variants => {
+const transformVariants = (variants) => {
   const variantsStyles = {};
   if (variants) {
-    variants.forEach(definition => {
+    variants.forEach((definition) => {
       const key = (0, _propsToClassKey.default)(definition.props);
       variantsStyles[key] = definition.style;
     });
@@ -48,26 +85,34 @@ const transformVariants = variants => {
 };
 const getVariantStyles = (name, theme) => {
   let variants = [];
-  if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
+  if (
+    theme &&
+    theme.components &&
+    theme.components[name] &&
+    theme.components[name].variants
+  ) {
     variants = theme.components[name].variants;
   }
   return transformVariants(variants);
 };
 const variantsResolver = (props, styles, variants) => {
-  const {
-    ownerState = {}
-  } = props;
+  const { ownerState = {} } = props;
   const variantsStyles = [];
   if (variants) {
-    variants.forEach(variant => {
+    variants.forEach((variant) => {
       let isMatch = true;
-      Object.keys(variant.props).forEach(key => {
-        if (ownerState[key] !== variant.props[key] && props[key] !== variant.props[key]) {
+      Object.keys(variant.props).forEach((key) => {
+        if (
+          ownerState[key] !== variant.props[key] &&
+          props[key] !== variant.props[key]
+        ) {
           isMatch = false;
         }
       });
       if (isMatch) {
-        variantsStyles.push(styles[(0, _propsToClassKey.default)(variant.props)]);
+        variantsStyles.push(
+          styles[(0, _propsToClassKey.default)(variant.props)]
+        );
       }
     });
   }
@@ -75,26 +120,30 @@ const variantsResolver = (props, styles, variants) => {
 };
 const themeVariantsResolver = (props, styles, theme, name) => {
   var _theme$components;
-  const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[name]) == null ? void 0 : _theme$components.variants;
+  const themeVariants =
+    theme == null ||
+    (_theme$components = theme.components) == null ||
+    (_theme$components = _theme$components[name]) == null
+      ? void 0
+      : _theme$components.variants;
   return variantsResolver(props, styles, themeVariants);
 };
 
 // Update /system/styled/#api in case if this changes
 function shouldForwardProp(prop) {
-  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
+  return (
+    prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as"
+  );
 }
-const systemDefaultTheme = exports.systemDefaultTheme = (0, _createTheme.default)();
-const lowercaseFirstLetter = string => {
+const systemDefaultTheme = (exports.systemDefaultTheme = (0,
+_createTheme.default)());
+const lowercaseFirstLetter = (string) => {
   if (!string) {
     return string;
   }
   return string.charAt(0).toLowerCase() + string.slice(1);
 };
-function resolveTheme({
-  defaultTheme,
-  theme,
-  themeId
-}) {
+function resolveTheme({ defaultTheme, theme, themeId }) {
   return isEmpty(theme) ? defaultTheme : theme[themeId] || theme;
 }
 function defaultOverridesResolver(slot) {
@@ -107,21 +156,29 @@ const muiStyledFunctionResolver = ({
   styledArg,
   props,
   defaultTheme,
-  themeId
+  themeId,
 }) => {
-  const resolvedStyles = styledArg((0, _extends2.default)({}, props, {
-    theme: resolveTheme((0, _extends2.default)({}, props, {
-      defaultTheme,
-      themeId
-    }))
-  }));
+  const resolvedStyles = styledArg(
+    (0, _extends2.default)({}, props, {
+      theme: resolveTheme(
+        (0, _extends2.default)({}, props, {
+          defaultTheme,
+          themeId,
+        })
+      ),
+    })
+  );
   let optionalVariants;
   if (resolvedStyles && resolvedStyles.variants) {
     optionalVariants = resolvedStyles.variants;
     delete resolvedStyles.variants;
   }
   if (optionalVariants) {
-    const variantsStyles = variantsResolver(props, transformVariants(optionalVariants), optionalVariants);
+    const variantsStyles = variantsResolver(
+      props,
+      transformVariants(optionalVariants),
+      optionalVariants
+    );
     return [resolvedStyles, ...variantsStyles];
   }
   return resolvedStyles;
@@ -131,20 +188,26 @@ function createStyled(input = {}) {
     themeId,
     defaultTheme = systemDefaultTheme,
     rootShouldForwardProp = shouldForwardProp,
-    slotShouldForwardProp = shouldForwardProp
+    slotShouldForwardProp = shouldForwardProp,
   } = input;
-  const systemSx = props => {
-    return (0, _styleFunctionSx.default)((0, _extends2.default)({}, props, {
-      theme: resolveTheme((0, _extends2.default)({}, props, {
-        defaultTheme,
-        themeId
-      }))
-    }));
+  const systemSx = (props) => {
+    return (0, _styleFunctionSx.default)(
+      (0, _extends2.default)({}, props, {
+        theme: resolveTheme(
+          (0, _extends2.default)({}, props, {
+            defaultTheme,
+            themeId,
+          })
+        ),
+      })
+    );
   };
   systemSx.__mui_systemSx = true;
   return (tag, inputOptions = {}) => {
     // Filter out the `sx` style function from the previous styled component to prevent unnecessary styles generated by the composite components.
-    (0, _styledEngine.internal_processStyles)(tag, styles => styles.filter(style => !(style != null && style.__mui_systemSx)));
+    (0, _styledEngine.internal_processStyles)(tag, (styles) =>
+      styles.filter((style) => !(style != null && style.__mui_systemSx))
+    );
     const {
         name: componentName,
         slot: componentSlot,
@@ -152,29 +215,41 @@ function createStyled(input = {}) {
         skipSx: inputSkipSx,
         // TODO v6: remove `lowercaseFirstLetter()` in the next major release
         // For more details: https://github.com/mui/material-ui/pull/37908
-        overridesResolver = defaultOverridesResolver(lowercaseFirstLetter(componentSlot))
+        overridesResolver = defaultOverridesResolver(
+          lowercaseFirstLetter(componentSlot)
+        ),
       } = inputOptions,
-      options = (0, _objectWithoutPropertiesLoose2.default)(inputOptions, _excluded);
+      options = (0, _objectWithoutPropertiesLoose2.default)(
+        inputOptions,
+        _excluded
+      );
 
     // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
-    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver :
-    // TODO v6: remove `Root` in the next major release
-    // For more details: https://github.com/mui/material-ui/pull/37908
-    componentSlot && componentSlot !== 'Root' && componentSlot !== 'root' || false;
+    const skipVariantsResolver =
+      inputSkipVariantsResolver !== undefined
+        ? inputSkipVariantsResolver
+        : // TODO v6: remove `Root` in the next major release
+          // For more details: https://github.com/mui/material-ui/pull/37908
+          (componentSlot &&
+            componentSlot !== "Root" &&
+            componentSlot !== "root") ||
+          false;
     const skipSx = inputSkipSx || false;
     let label;
-    if (process.env.NODE_ENV !== 'production') {
-      if (componentName) {
-        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
-        // For more details: https://github.com/mui/material-ui/pull/37908
-        label = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;
-      }
+    //if (process.env.NODE_ENV !== 'production') {
+    if (componentName) {
+      // TODO v6: remove `lowercaseFirstLetter()` in the next major release
+      // For more details: https://github.com/mui/material-ui/pull/37908
+      label = `${componentName}-${lowercaseFirstLetter(
+        componentSlot || "Root"
+      )}`;
     }
+    //    }
     let shouldForwardPropOption = shouldForwardProp;
 
     // TODO v6: remove `Root` in the next major release
     // For more details: https://github.com/mui/material-ui/pull/37908
-    if (componentSlot === 'Root' || componentSlot === 'root') {
+    if (componentSlot === "Root" || componentSlot === "root") {
       shouldForwardPropOption = rootShouldForwardProp;
     } else if (componentSlot) {
       // any other slot specified
@@ -183,83 +258,113 @@ function createStyled(input = {}) {
       // for string (html) tag, preserve the behavior in emotion & styled-components.
       shouldForwardPropOption = undefined;
     }
-    const defaultStyledResolver = (0, _styledEngine.default)(tag, (0, _extends2.default)({
-      shouldForwardProp: shouldForwardPropOption,
-      label
-    }, options));
+    const defaultStyledResolver = (0, _styledEngine.default)(
+      tag,
+      (0, _extends2.default)(
+        {
+          shouldForwardProp: shouldForwardPropOption,
+          label,
+        },
+        options
+      )
+    );
     const muiStyledResolver = (styleArg, ...expressions) => {
-      const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {
-        // On the server Emotion doesn't use React.forwardRef for creating components, so the created
-        // component stays as a function. This condition makes sure that we do not interpolate functions
-        // which are basically components used as a selectors.
-        if (typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg) {
-          return props => muiStyledFunctionResolver({
-            styledArg: stylesArg,
-            props,
-            defaultTheme,
-            themeId
-          });
-        }
-        if ((0, _utils.isPlainObject)(stylesArg)) {
-          let transformedStylesArg = stylesArg;
-          let styledArgVariants;
-          if (stylesArg && stylesArg.variants) {
-            styledArgVariants = stylesArg.variants;
-            delete transformedStylesArg.variants;
-            transformedStylesArg = props => {
-              let result = stylesArg;
-              const variantStyles = variantsResolver(props, transformVariants(styledArgVariants), styledArgVariants);
-              variantStyles.forEach(variantStyle => {
-                result = (0, _utils.deepmerge)(result, variantStyle);
-              });
-              return result;
-            };
-          }
-          return transformedStylesArg;
-        }
-        return stylesArg;
-      }) : [];
+      const expressionsWithDefaultTheme = expressions
+        ? expressions.map((stylesArg) => {
+            // On the server Emotion doesn't use React.forwardRef for creating components, so the created
+            // component stays as a function. This condition makes sure that we do not interpolate functions
+            // which are basically components used as a selectors.
+            if (
+              typeof stylesArg === "function" &&
+              stylesArg.__emotion_real !== stylesArg
+            ) {
+              return (props) =>
+                muiStyledFunctionResolver({
+                  styledArg: stylesArg,
+                  props,
+                  defaultTheme,
+                  themeId,
+                });
+            }
+            if ((0, _utils.isPlainObject)(stylesArg)) {
+              let transformedStylesArg = stylesArg;
+              let styledArgVariants;
+              if (stylesArg && stylesArg.variants) {
+                styledArgVariants = stylesArg.variants;
+                delete transformedStylesArg.variants;
+                transformedStylesArg = (props) => {
+                  let result = stylesArg;
+                  const variantStyles = variantsResolver(
+                    props,
+                    transformVariants(styledArgVariants),
+                    styledArgVariants
+                  );
+                  variantStyles.forEach((variantStyle) => {
+                    result = (0, _utils.deepmerge)(result, variantStyle);
+                  });
+                  return result;
+                };
+              }
+              return transformedStylesArg;
+            }
+            return stylesArg;
+          })
+        : [];
       let transformedStyleArg = styleArg;
       if ((0, _utils.isPlainObject)(styleArg)) {
         let styledArgVariants;
         if (styleArg && styleArg.variants) {
           styledArgVariants = styleArg.variants;
           delete transformedStyleArg.variants;
-          transformedStyleArg = props => {
+          transformedStyleArg = (props) => {
             let result = styleArg;
-            const variantStyles = variantsResolver(props, transformVariants(styledArgVariants), styledArgVariants);
-            variantStyles.forEach(variantStyle => {
+            const variantStyles = variantsResolver(
+              props,
+              transformVariants(styledArgVariants),
+              styledArgVariants
+            );
+            variantStyles.forEach((variantStyle) => {
               result = (0, _utils.deepmerge)(result, variantStyle);
             });
             return result;
           };
         }
-      } else if (typeof styleArg === 'function' &&
-      // On the server Emotion doesn't use React.forwardRef for creating components, so the created
-      // component stays as a function. This condition makes sure that we do not interpolate functions
-      // which are basically components used as a selectors.
-      styleArg.__emotion_real !== styleArg) {
+      } else if (
+        typeof styleArg === "function" &&
+        // On the server Emotion doesn't use React.forwardRef for creating components, so the created
+        // component stays as a function. This condition makes sure that we do not interpolate functions
+        // which are basically components used as a selectors.
+        styleArg.__emotion_real !== styleArg
+      ) {
         // If the type is function, we need to define the default theme.
-        transformedStyleArg = props => muiStyledFunctionResolver({
-          styledArg: styleArg,
-          props,
-          defaultTheme,
-          themeId
-        });
+        transformedStyleArg = (props) =>
+          muiStyledFunctionResolver({
+            styledArg: styleArg,
+            props,
+            defaultTheme,
+            themeId,
+          });
       }
       if (componentName && overridesResolver) {
-        expressionsWithDefaultTheme.push(props => {
-          const theme = resolveTheme((0, _extends2.default)({}, props, {
-            defaultTheme,
-            themeId
-          }));
+        expressionsWithDefaultTheme.push((props) => {
+          const theme = resolveTheme(
+            (0, _extends2.default)({}, props, {
+              defaultTheme,
+              themeId,
+            })
+          );
           const styleOverrides = getStyleOverrides(componentName, theme);
           if (styleOverrides) {
             const resolvedStyleOverrides = {};
             Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
-              resolvedStyleOverrides[slotKey] = typeof slotStyle === 'function' ? slotStyle((0, _extends2.default)({}, props, {
-                theme
-              })) : slotStyle;
+              resolvedStyleOverrides[slotKey] =
+                typeof slotStyle === "function"
+                  ? slotStyle(
+                      (0, _extends2.default)({}, props, {
+                        theme,
+                      })
+                    )
+                  : slotStyle;
             });
             return overridesResolver(props, resolvedStyleOverrides);
           }
@@ -267,29 +372,42 @@ function createStyled(input = {}) {
         });
       }
       if (componentName && !skipVariantsResolver) {
-        expressionsWithDefaultTheme.push(props => {
-          const theme = resolveTheme((0, _extends2.default)({}, props, {
-            defaultTheme,
-            themeId
-          }));
-          return themeVariantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
+        expressionsWithDefaultTheme.push((props) => {
+          const theme = resolveTheme(
+            (0, _extends2.default)({}, props, {
+              defaultTheme,
+              themeId,
+            })
+          );
+          return themeVariantsResolver(
+            props,
+            getVariantStyles(componentName, theme),
+            theme,
+            componentName
+          );
         });
       }
       if (!skipSx) {
         expressionsWithDefaultTheme.push(systemSx);
       }
-      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
+      const numOfCustomFnsApplied =
+        expressionsWithDefaultTheme.length - expressions.length;
       if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
-        const placeholders = new Array(numOfCustomFnsApplied).fill('');
+        const placeholders = new Array(numOfCustomFnsApplied).fill("");
         // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.
         transformedStyleArg = [...styleArg, ...placeholders];
         transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
       }
-      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
-      if (process.env.NODE_ENV !== 'production') {
+      const Component = defaultStyledResolver(
+        transformedStyleArg,
+        ...expressionsWithDefaultTheme
+      );
+      if (process.env.NODE_ENV !== "production") {
         let displayName;
         if (componentName) {
-          displayName = `${componentName}${(0, _utils.unstable_capitalize)(componentSlot || '')}`;
+          displayName = `${componentName}${(0, _utils.unstable_capitalize)(
+            componentSlot || ""
+          )}`;
         }
         if (displayName === undefined) {
           displayName = `Styled(${(0, _utils.getDisplayName)(tag)})`;
diff --git a/esm/createStyled.js b/esm/createStyled.js
index d3fef8850d27b173ea596362d4533a7785fc41d4..0b28885144ef1dbb687a6ca4edbaff0bd4f71cc0 100644
--- a/esm/createStyled.js
+++ b/esm/createStyled.js
@@ -1,34 +1,53 @@
 import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
 import _extends from "@babel/runtime/helpers/esm/extends";
-const _excluded = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
+const _excluded = [
+  "name",
+  "slot",
+  "skipVariantsResolver",
+  "skipSx",
+  "overridesResolver",
+];
 /* eslint-disable no-underscore-dangle */
-import styledEngineStyled, { internal_processStyles as processStyles } from '@mui/styled-engine';
-import { getDisplayName, unstable_capitalize as capitalize, isPlainObject, deepmerge } from '@mui/utils';
-import createTheme from './createTheme';
-import propsToClassKey from './propsToClassKey';
-import styleFunctionSx from './styleFunctionSx';
+import styledEngineStyled, {
+  internal_processStyles as processStyles,
+} from "@mui/styled-engine";
+import {
+  getDisplayName,
+  unstable_capitalize as capitalize,
+  isPlainObject,
+  deepmerge,
+} from "@mui/utils";
+import createTheme from "./createTheme";
+import propsToClassKey from "./propsToClassKey";
+import styleFunctionSx from "./styleFunctionSx";
 function isEmpty(obj) {
   return Object.keys(obj).length === 0;
 }
 
 // https://github.com/emotion-js/emotion/blob/26ded6109fcd8ca9875cc2ce4564fee678a3f3c5/packages/styled/src/utils.js#L40
 function isStringTag(tag) {
-  return typeof tag === 'string' &&
-  // 96 is one less than the char code
-  // for "a" so this is checking that
-  // it's a lowercase character
-  tag.charCodeAt(0) > 96;
+  return (
+    typeof tag === "string" &&
+    // 96 is one less than the char code
+    // for "a" so this is checking that
+    // it's a lowercase character
+    tag.charCodeAt(0) > 96
+  );
 }
 const getStyleOverrides = (name, theme) => {
-  if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
+  if (
+    theme.components &&
+    theme.components[name] &&
+    theme.components[name].styleOverrides
+  ) {
     return theme.components[name].styleOverrides;
   }
   return null;
 };
-const transformVariants = variants => {
+const transformVariants = (variants) => {
   const variantsStyles = {};
   if (variants) {
-    variants.forEach(definition => {
+    variants.forEach((definition) => {
       const key = propsToClassKey(definition.props);
       variantsStyles[key] = definition.style;
     });
@@ -37,21 +56,27 @@ const transformVariants = variants => {
 };
 const getVariantStyles = (name, theme) => {
   let variants = [];
-  if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
+  if (
+    theme &&
+    theme.components &&
+    theme.components[name] &&
+    theme.components[name].variants
+  ) {
     variants = theme.components[name].variants;
   }
   return transformVariants(variants);
 };
 const variantsResolver = (props, styles, variants) => {
-  const {
-    ownerState = {}
-  } = props;
+  const { ownerState = {} } = props;
   const variantsStyles = [];
   if (variants) {
-    variants.forEach(variant => {
+    variants.forEach((variant) => {
       let isMatch = true;
-      Object.keys(variant.props).forEach(key => {
-        if (ownerState[key] !== variant.props[key] && props[key] !== variant.props[key]) {
+      Object.keys(variant.props).forEach((key) => {
+        if (
+          ownerState[key] !== variant.props[key] &&
+          props[key] !== variant.props[key]
+        ) {
           isMatch = false;
         }
       });
@@ -64,26 +89,29 @@ const variantsResolver = (props, styles, variants) => {
 };
 const themeVariantsResolver = (props, styles, theme, name) => {
   var _theme$components;
-  const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[name]) == null ? void 0 : _theme$components.variants;
+  const themeVariants =
+    theme == null ||
+    (_theme$components = theme.components) == null ||
+    (_theme$components = _theme$components[name]) == null
+      ? void 0
+      : _theme$components.variants;
   return variantsResolver(props, styles, themeVariants);
 };
 
 // Update /system/styled/#api in case if this changes
 export function shouldForwardProp(prop) {
-  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
+  return (
+    prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as"
+  );
 }
 export const systemDefaultTheme = createTheme();
-const lowercaseFirstLetter = string => {
+const lowercaseFirstLetter = (string) => {
   if (!string) {
     return string;
   }
   return string.charAt(0).toLowerCase() + string.slice(1);
 };
-function resolveTheme({
-  defaultTheme,
-  theme,
-  themeId
-}) {
+function resolveTheme({ defaultTheme, theme, themeId }) {
   return isEmpty(theme) ? defaultTheme : theme[themeId] || theme;
 }
 function defaultOverridesResolver(slot) {
@@ -96,21 +124,29 @@ const muiStyledFunctionResolver = ({
   styledArg,
   props,
   defaultTheme,
-  themeId
+  themeId,
 }) => {
-  const resolvedStyles = styledArg(_extends({}, props, {
-    theme: resolveTheme(_extends({}, props, {
-      defaultTheme,
-      themeId
-    }))
-  }));
+  const resolvedStyles = styledArg(
+    _extends({}, props, {
+      theme: resolveTheme(
+        _extends({}, props, {
+          defaultTheme,
+          themeId,
+        })
+      ),
+    })
+  );
   let optionalVariants;
   if (resolvedStyles && resolvedStyles.variants) {
     optionalVariants = resolvedStyles.variants;
     delete resolvedStyles.variants;
   }
   if (optionalVariants) {
-    const variantsStyles = variantsResolver(props, transformVariants(optionalVariants), optionalVariants);
+    const variantsStyles = variantsResolver(
+      props,
+      transformVariants(optionalVariants),
+      optionalVariants
+    );
     return [resolvedStyles, ...variantsStyles];
   }
   return resolvedStyles;
@@ -120,20 +156,26 @@ export default function createStyled(input = {}) {
     themeId,
     defaultTheme = systemDefaultTheme,
     rootShouldForwardProp = shouldForwardProp,
-    slotShouldForwardProp = shouldForwardProp
+    slotShouldForwardProp = shouldForwardProp,
   } = input;
-  const systemSx = props => {
-    return styleFunctionSx(_extends({}, props, {
-      theme: resolveTheme(_extends({}, props, {
-        defaultTheme,
-        themeId
-      }))
-    }));
+  const systemSx = (props) => {
+    return styleFunctionSx(
+      _extends({}, props, {
+        theme: resolveTheme(
+          _extends({}, props, {
+            defaultTheme,
+            themeId,
+          })
+        ),
+      })
+    );
   };
   systemSx.__mui_systemSx = true;
   return (tag, inputOptions = {}) => {
     // Filter out the `sx` style function from the previous styled component to prevent unnecessary styles generated by the composite components.
-    processStyles(tag, styles => styles.filter(style => !(style != null && style.__mui_systemSx)));
+    processStyles(tag, (styles) =>
+      styles.filter((style) => !(style != null && style.__mui_systemSx))
+    );
     const {
         name: componentName,
         slot: componentSlot,
@@ -141,29 +183,38 @@ export default function createStyled(input = {}) {
         skipSx: inputSkipSx,
         // TODO v6: remove `lowercaseFirstLetter()` in the next major release
         // For more details: https://github.com/mui/material-ui/pull/37908
-        overridesResolver = defaultOverridesResolver(lowercaseFirstLetter(componentSlot))
+        overridesResolver = defaultOverridesResolver(
+          lowercaseFirstLetter(componentSlot)
+        ),
       } = inputOptions,
       options = _objectWithoutPropertiesLoose(inputOptions, _excluded);
 
     // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
-    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver :
-    // TODO v6: remove `Root` in the next major release
-    // For more details: https://github.com/mui/material-ui/pull/37908
-    componentSlot && componentSlot !== 'Root' && componentSlot !== 'root' || false;
+    const skipVariantsResolver =
+      inputSkipVariantsResolver !== undefined
+        ? inputSkipVariantsResolver
+        : // TODO v6: remove `Root` in the next major release
+          // For more details: https://github.com/mui/material-ui/pull/37908
+          (componentSlot &&
+            componentSlot !== "Root" &&
+            componentSlot !== "root") ||
+          false;
     const skipSx = inputSkipSx || false;
     let label;
-    if (process.env.NODE_ENV !== 'production') {
-      if (componentName) {
-        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
-        // For more details: https://github.com/mui/material-ui/pull/37908
-        label = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;
-      }
+    //if (process.env.NODE_ENV !== 'production') {
+    if (componentName) {
+      // TODO v6: remove `lowercaseFirstLetter()` in the next major release
+      // For more details: https://github.com/mui/material-ui/pull/37908
+      label = `${componentName}-${lowercaseFirstLetter(
+        componentSlot || "Root"
+      )}`;
     }
+    //    }
     let shouldForwardPropOption = shouldForwardProp;
 
     // TODO v6: remove `Root` in the next major release
     // For more details: https://github.com/mui/material-ui/pull/37908
-    if (componentSlot === 'Root' || componentSlot === 'root') {
+    if (componentSlot === "Root" || componentSlot === "root") {
       shouldForwardPropOption = rootShouldForwardProp;
     } else if (componentSlot) {
       // any other slot specified
@@ -172,83 +223,113 @@ export default function createStyled(input = {}) {
       // for string (html) tag, preserve the behavior in emotion & styled-components.
       shouldForwardPropOption = undefined;
     }
-    const defaultStyledResolver = styledEngineStyled(tag, _extends({
-      shouldForwardProp: shouldForwardPropOption,
-      label
-    }, options));
+    const defaultStyledResolver = styledEngineStyled(
+      tag,
+      _extends(
+        {
+          shouldForwardProp: shouldForwardPropOption,
+          label,
+        },
+        options
+      )
+    );
     const muiStyledResolver = (styleArg, ...expressions) => {
-      const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {
-        // On the server Emotion doesn't use React.forwardRef for creating components, so the created
-        // component stays as a function. This condition makes sure that we do not interpolate functions
-        // which are basically components used as a selectors.
-        if (typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg) {
-          return props => muiStyledFunctionResolver({
-            styledArg: stylesArg,
-            props,
-            defaultTheme,
-            themeId
-          });
-        }
-        if (isPlainObject(stylesArg)) {
-          let transformedStylesArg = stylesArg;
-          let styledArgVariants;
-          if (stylesArg && stylesArg.variants) {
-            styledArgVariants = stylesArg.variants;
-            delete transformedStylesArg.variants;
-            transformedStylesArg = props => {
-              let result = stylesArg;
-              const variantStyles = variantsResolver(props, transformVariants(styledArgVariants), styledArgVariants);
-              variantStyles.forEach(variantStyle => {
-                result = deepmerge(result, variantStyle);
-              });
-              return result;
-            };
-          }
-          return transformedStylesArg;
-        }
-        return stylesArg;
-      }) : [];
+      const expressionsWithDefaultTheme = expressions
+        ? expressions.map((stylesArg) => {
+            // On the server Emotion doesn't use React.forwardRef for creating components, so the created
+            // component stays as a function. This condition makes sure that we do not interpolate functions
+            // which are basically components used as a selectors.
+            if (
+              typeof stylesArg === "function" &&
+              stylesArg.__emotion_real !== stylesArg
+            ) {
+              return (props) =>
+                muiStyledFunctionResolver({
+                  styledArg: stylesArg,
+                  props,
+                  defaultTheme,
+                  themeId,
+                });
+            }
+            if (isPlainObject(stylesArg)) {
+              let transformedStylesArg = stylesArg;
+              let styledArgVariants;
+              if (stylesArg && stylesArg.variants) {
+                styledArgVariants = stylesArg.variants;
+                delete transformedStylesArg.variants;
+                transformedStylesArg = (props) => {
+                  let result = stylesArg;
+                  const variantStyles = variantsResolver(
+                    props,
+                    transformVariants(styledArgVariants),
+                    styledArgVariants
+                  );
+                  variantStyles.forEach((variantStyle) => {
+                    result = deepmerge(result, variantStyle);
+                  });
+                  return result;
+                };
+              }
+              return transformedStylesArg;
+            }
+            return stylesArg;
+          })
+        : [];
       let transformedStyleArg = styleArg;
       if (isPlainObject(styleArg)) {
         let styledArgVariants;
         if (styleArg && styleArg.variants) {
           styledArgVariants = styleArg.variants;
           delete transformedStyleArg.variants;
-          transformedStyleArg = props => {
+          transformedStyleArg = (props) => {
             let result = styleArg;
-            const variantStyles = variantsResolver(props, transformVariants(styledArgVariants), styledArgVariants);
-            variantStyles.forEach(variantStyle => {
+            const variantStyles = variantsResolver(
+              props,
+              transformVariants(styledArgVariants),
+              styledArgVariants
+            );
+            variantStyles.forEach((variantStyle) => {
               result = deepmerge(result, variantStyle);
             });
             return result;
           };
         }
-      } else if (typeof styleArg === 'function' &&
-      // On the server Emotion doesn't use React.forwardRef for creating components, so the created
-      // component stays as a function. This condition makes sure that we do not interpolate functions
-      // which are basically components used as a selectors.
-      styleArg.__emotion_real !== styleArg) {
+      } else if (
+        typeof styleArg === "function" &&
+        // On the server Emotion doesn't use React.forwardRef for creating components, so the created
+        // component stays as a function. This condition makes sure that we do not interpolate functions
+        // which are basically components used as a selectors.
+        styleArg.__emotion_real !== styleArg
+      ) {
         // If the type is function, we need to define the default theme.
-        transformedStyleArg = props => muiStyledFunctionResolver({
-          styledArg: styleArg,
-          props,
-          defaultTheme,
-          themeId
-        });
+        transformedStyleArg = (props) =>
+          muiStyledFunctionResolver({
+            styledArg: styleArg,
+            props,
+            defaultTheme,
+            themeId,
+          });
       }
       if (componentName && overridesResolver) {
-        expressionsWithDefaultTheme.push(props => {
-          const theme = resolveTheme(_extends({}, props, {
-            defaultTheme,
-            themeId
-          }));
+        expressionsWithDefaultTheme.push((props) => {
+          const theme = resolveTheme(
+            _extends({}, props, {
+              defaultTheme,
+              themeId,
+            })
+          );
           const styleOverrides = getStyleOverrides(componentName, theme);
           if (styleOverrides) {
             const resolvedStyleOverrides = {};
             Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
-              resolvedStyleOverrides[slotKey] = typeof slotStyle === 'function' ? slotStyle(_extends({}, props, {
-                theme
-              })) : slotStyle;
+              resolvedStyleOverrides[slotKey] =
+                typeof slotStyle === "function"
+                  ? slotStyle(
+                      _extends({}, props, {
+                        theme,
+                      })
+                    )
+                  : slotStyle;
             });
             return overridesResolver(props, resolvedStyleOverrides);
           }
@@ -256,29 +337,40 @@ export default function createStyled(input = {}) {
         });
       }
       if (componentName && !skipVariantsResolver) {
-        expressionsWithDefaultTheme.push(props => {
-          const theme = resolveTheme(_extends({}, props, {
-            defaultTheme,
-            themeId
-          }));
-          return themeVariantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
+        expressionsWithDefaultTheme.push((props) => {
+          const theme = resolveTheme(
+            _extends({}, props, {
+              defaultTheme,
+              themeId,
+            })
+          );
+          return themeVariantsResolver(
+            props,
+            getVariantStyles(componentName, theme),
+            theme,
+            componentName
+          );
         });
       }
       if (!skipSx) {
         expressionsWithDefaultTheme.push(systemSx);
       }
-      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
+      const numOfCustomFnsApplied =
+        expressionsWithDefaultTheme.length - expressions.length;
       if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
-        const placeholders = new Array(numOfCustomFnsApplied).fill('');
+        const placeholders = new Array(numOfCustomFnsApplied).fill("");
         // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.
         transformedStyleArg = [...styleArg, ...placeholders];
         transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
       }
-      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
-      if (process.env.NODE_ENV !== 'production') {
+      const Component = defaultStyledResolver(
+        transformedStyleArg,
+        ...expressionsWithDefaultTheme
+      );
+      if (process.env.NODE_ENV !== "production") {
         let displayName;
         if (componentName) {
-          displayName = `${componentName}${capitalize(componentSlot || '')}`;
+          displayName = `${componentName}${capitalize(componentSlot || "")}`;
         }
         if (displayName === undefined) {
           displayName = `Styled(${getDisplayName(tag)})`;
diff --git a/legacy/createStyled.js b/legacy/createStyled.js
index 16dc910981ada478c3b2768de2ca4121c59a739e..9b6db619585be77fdcc6277d6efd8fab13c75f04 100644
--- a/legacy/createStyled.js
+++ b/legacy/createStyled.js
@@ -3,25 +3,38 @@ import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutPr
 import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
 import _extends from "@babel/runtime/helpers/esm/extends";
 /* eslint-disable no-underscore-dangle */
-import styledEngineStyled, { internal_processStyles as processStyles } from '@mui/styled-engine';
-import { getDisplayName, unstable_capitalize as capitalize, isPlainObject, deepmerge } from '@mui/utils';
-import createTheme from './createTheme';
-import propsToClassKey from './propsToClassKey';
-import styleFunctionSx from './styleFunctionSx';
+import styledEngineStyled, {
+  internal_processStyles as processStyles,
+} from "@mui/styled-engine";
+import {
+  getDisplayName,
+  unstable_capitalize as capitalize,
+  isPlainObject,
+  deepmerge,
+} from "@mui/utils";
+import createTheme from "./createTheme";
+import propsToClassKey from "./propsToClassKey";
+import styleFunctionSx from "./styleFunctionSx";
 function isEmpty(obj) {
   return Object.keys(obj).length === 0;
 }
 
 // https://github.com/emotion-js/emotion/blob/26ded6109fcd8ca9875cc2ce4564fee678a3f3c5/packages/styled/src/utils.js#L40
 function isStringTag(tag) {
-  return typeof tag === 'string' &&
-  // 96 is one less than the char code
-  // for "a" so this is checking that
-  // it's a lowercase character
-  tag.charCodeAt(0) > 96;
+  return (
+    typeof tag === "string" &&
+    // 96 is one less than the char code
+    // for "a" so this is checking that
+    // it's a lowercase character
+    tag.charCodeAt(0) > 96
+  );
 }
 var getStyleOverrides = function getStyleOverrides(name, theme) {
-  if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
+  if (
+    theme.components &&
+    theme.components[name] &&
+    theme.components[name].styleOverrides
+  ) {
     return theme.components[name].styleOverrides;
   }
   return null;
@@ -38,7 +51,12 @@ var transformVariants = function transformVariants(variants) {
 };
 var getVariantStyles = function getVariantStyles(name, theme) {
   var variants = [];
-  if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
+  if (
+    theme &&
+    theme.components &&
+    theme.components[name] &&
+    theme.components[name].variants
+  ) {
     variants = theme.components[name].variants;
   }
   return transformVariants(variants);
@@ -51,7 +69,10 @@ var variantsResolver = function variantsResolver(props, styles, variants) {
     variants.forEach(function (variant) {
       var isMatch = true;
       Object.keys(variant.props).forEach(function (key) {
-        if (ownerState[key] !== variant.props[key] && props[key] !== variant.props[key]) {
+        if (
+          ownerState[key] !== variant.props[key] &&
+          props[key] !== variant.props[key]
+        ) {
           isMatch = false;
         }
       });
@@ -62,15 +83,27 @@ var variantsResolver = function variantsResolver(props, styles, variants) {
   }
   return variantsStyles;
 };
-var themeVariantsResolver = function themeVariantsResolver(props, styles, theme, name) {
+var themeVariantsResolver = function themeVariantsResolver(
+  props,
+  styles,
+  theme,
+  name
+) {
   var _theme$components;
-  var themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[name]) == null ? void 0 : _theme$components.variants;
+  var themeVariants =
+    theme == null ||
+    (_theme$components = theme.components) == null ||
+    (_theme$components = _theme$components[name]) == null
+      ? void 0
+      : _theme$components.variants;
   return variantsResolver(props, styles, themeVariants);
 };
 
 // Update /system/styled/#api in case if this changes
 export function shouldForwardProp(prop) {
-  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
+  return (
+    prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as"
+  );
 }
 export var systemDefaultTheme = createTheme();
 var lowercaseFirstLetter = function lowercaseFirstLetter(string) {
@@ -98,43 +131,64 @@ var muiStyledFunctionResolver = function muiStyledFunctionResolver(_ref2) {
     props = _ref2.props,
     defaultTheme = _ref2.defaultTheme,
     themeId = _ref2.themeId;
-  var resolvedStyles = styledArg(_extends({}, props, {
-    theme: resolveTheme(_extends({}, props, {
-      defaultTheme: defaultTheme,
-      themeId: themeId
-    }))
-  }));
+  var resolvedStyles = styledArg(
+    _extends({}, props, {
+      theme: resolveTheme(
+        _extends({}, props, {
+          defaultTheme: defaultTheme,
+          themeId: themeId,
+        })
+      ),
+    })
+  );
   var optionalVariants;
   if (resolvedStyles && resolvedStyles.variants) {
     optionalVariants = resolvedStyles.variants;
     delete resolvedStyles.variants;
   }
   if (optionalVariants) {
-    var variantsStyles = variantsResolver(props, transformVariants(optionalVariants), optionalVariants);
+    var variantsStyles = variantsResolver(
+      props,
+      transformVariants(optionalVariants),
+      optionalVariants
+    );
     return [resolvedStyles].concat(_toConsumableArray(variantsStyles));
   }
   return resolvedStyles;
 };
 export default function createStyled() {
-  var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
+  var input =
+    arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
   var themeId = input.themeId,
     _input$defaultTheme = input.defaultTheme,
-    defaultTheme = _input$defaultTheme === void 0 ? systemDefaultTheme : _input$defaultTheme,
+    defaultTheme =
+      _input$defaultTheme === void 0 ? systemDefaultTheme : _input$defaultTheme,
     _input$rootShouldForw = input.rootShouldForwardProp,
-    rootShouldForwardProp = _input$rootShouldForw === void 0 ? shouldForwardProp : _input$rootShouldForw,
+    rootShouldForwardProp =
+      _input$rootShouldForw === void 0
+        ? shouldForwardProp
+        : _input$rootShouldForw,
     _input$slotShouldForw = input.slotShouldForwardProp,
-    slotShouldForwardProp = _input$slotShouldForw === void 0 ? shouldForwardProp : _input$slotShouldForw;
+    slotShouldForwardProp =
+      _input$slotShouldForw === void 0
+        ? shouldForwardProp
+        : _input$slotShouldForw;
   var systemSx = function systemSx(props) {
-    return styleFunctionSx(_extends({}, props, {
-      theme: resolveTheme(_extends({}, props, {
-        defaultTheme: defaultTheme,
-        themeId: themeId
-      }))
-    }));
+    return styleFunctionSx(
+      _extends({}, props, {
+        theme: resolveTheme(
+          _extends({}, props, {
+            defaultTheme: defaultTheme,
+            themeId: themeId,
+          })
+        ),
+      })
+    );
   };
   systemSx.__mui_systemSx = true;
   return function (tag) {
-    var inputOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
+    var inputOptions =
+      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
     // Filter out the `sx` style function from the previous styled component to prevent unnecessary styles generated by the composite components.
     processStyles(tag, function (styles) {
       return styles.filter(function (style) {
@@ -146,26 +200,42 @@ export default function createStyled() {
       inputSkipVariantsResolver = inputOptions.skipVariantsResolver,
       inputSkipSx = inputOptions.skipSx,
       _inputOptions$overrid = inputOptions.overridesResolver,
-      overridesResolver = _inputOptions$overrid === void 0 ? defaultOverridesResolver(lowercaseFirstLetter(componentSlot)) : _inputOptions$overrid,
-      options = _objectWithoutProperties(inputOptions, ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"]); // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
-    var skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver :
-    // TODO v6: remove `Root` in the next major release
-    // For more details: https://github.com/mui/material-ui/pull/37908
-    componentSlot && componentSlot !== 'Root' && componentSlot !== 'root' || false;
+      overridesResolver =
+        _inputOptions$overrid === void 0
+          ? defaultOverridesResolver(lowercaseFirstLetter(componentSlot))
+          : _inputOptions$overrid,
+      options = _objectWithoutProperties(inputOptions, [
+        "name",
+        "slot",
+        "skipVariantsResolver",
+        "skipSx",
+        "overridesResolver",
+      ]); // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
+    var skipVariantsResolver =
+      inputSkipVariantsResolver !== undefined
+        ? inputSkipVariantsResolver
+        : // TODO v6: remove `Root` in the next major release
+          // For more details: https://github.com/mui/material-ui/pull/37908
+          (componentSlot &&
+            componentSlot !== "Root" &&
+            componentSlot !== "root") ||
+          false;
     var skipSx = inputSkipSx || false;
     var label;
-    if (process.env.NODE_ENV !== 'production') {
-      if (componentName) {
-        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
-        // For more details: https://github.com/mui/material-ui/pull/37908
-        label = "".concat(componentName, "-").concat(lowercaseFirstLetter(componentSlot || 'Root'));
-      }
+    //if (process.env.NODE_ENV !== 'production') {
+    if (componentName) {
+      // TODO v6: remove `lowercaseFirstLetter()` in the next major release
+      // For more details: https://github.com/mui/material-ui/pull/37908
+      label = ""
+        .concat(componentName, "-")
+        .concat(lowercaseFirstLetter(componentSlot || "Root"));
     }
+    //}
     var shouldForwardPropOption = shouldForwardProp;
 
     // TODO v6: remove `Root` in the next major release
     // For more details: https://github.com/mui/material-ui/pull/37908
-    if (componentSlot === 'Root' || componentSlot === 'root') {
+    if (componentSlot === "Root" || componentSlot === "root") {
       shouldForwardPropOption = rootShouldForwardProp;
     } else if (componentSlot) {
       // any other slot specified
@@ -174,47 +244,68 @@ export default function createStyled() {
       // for string (html) tag, preserve the behavior in emotion & styled-components.
       shouldForwardPropOption = undefined;
     }
-    var defaultStyledResolver = styledEngineStyled(tag, _extends({
-      shouldForwardProp: shouldForwardPropOption,
-      label: label
-    }, options));
+    var defaultStyledResolver = styledEngineStyled(
+      tag,
+      _extends(
+        {
+          shouldForwardProp: shouldForwardPropOption,
+          label: label,
+        },
+        options
+      )
+    );
     var muiStyledResolver = function muiStyledResolver(styleArg) {
-      for (var _len = arguments.length, expressions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
+      for (
+        var _len = arguments.length,
+          expressions = new Array(_len > 1 ? _len - 1 : 0),
+          _key = 1;
+        _key < _len;
+        _key++
+      ) {
         expressions[_key - 1] = arguments[_key];
       }
-      var expressionsWithDefaultTheme = expressions ? expressions.map(function (stylesArg) {
-        // On the server Emotion doesn't use React.forwardRef for creating components, so the created
-        // component stays as a function. This condition makes sure that we do not interpolate functions
-        // which are basically components used as a selectors.
-        if (typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg) {
-          return function (props) {
-            return muiStyledFunctionResolver({
-              styledArg: stylesArg,
-              props: props,
-              defaultTheme: defaultTheme,
-              themeId: themeId
-            });
-          };
-        }
-        if (isPlainObject(stylesArg)) {
-          var transformedStylesArg = stylesArg;
-          var styledArgVariants;
-          if (stylesArg && stylesArg.variants) {
-            styledArgVariants = stylesArg.variants;
-            delete transformedStylesArg.variants;
-            transformedStylesArg = function transformedStylesArg(props) {
-              var result = stylesArg;
-              var variantStyles = variantsResolver(props, transformVariants(styledArgVariants), styledArgVariants);
-              variantStyles.forEach(function (variantStyle) {
-                result = deepmerge(result, variantStyle);
-              });
-              return result;
-            };
-          }
-          return transformedStylesArg;
-        }
-        return stylesArg;
-      }) : [];
+      var expressionsWithDefaultTheme = expressions
+        ? expressions.map(function (stylesArg) {
+            // On the server Emotion doesn't use React.forwardRef for creating components, so the created
+            // component stays as a function. This condition makes sure that we do not interpolate functions
+            // which are basically components used as a selectors.
+            if (
+              typeof stylesArg === "function" &&
+              stylesArg.__emotion_real !== stylesArg
+            ) {
+              return function (props) {
+                return muiStyledFunctionResolver({
+                  styledArg: stylesArg,
+                  props: props,
+                  defaultTheme: defaultTheme,
+                  themeId: themeId,
+                });
+              };
+            }
+            if (isPlainObject(stylesArg)) {
+              var transformedStylesArg = stylesArg;
+              var styledArgVariants;
+              if (stylesArg && stylesArg.variants) {
+                styledArgVariants = stylesArg.variants;
+                delete transformedStylesArg.variants;
+                transformedStylesArg = function transformedStylesArg(props) {
+                  var result = stylesArg;
+                  var variantStyles = variantsResolver(
+                    props,
+                    transformVariants(styledArgVariants),
+                    styledArgVariants
+                  );
+                  variantStyles.forEach(function (variantStyle) {
+                    result = deepmerge(result, variantStyle);
+                  });
+                  return result;
+                };
+              }
+              return transformedStylesArg;
+            }
+            return stylesArg;
+          })
+        : [];
       var transformedStyleArg = styleArg;
       if (isPlainObject(styleArg)) {
         var styledArgVariants;
@@ -223,34 +314,42 @@ export default function createStyled() {
           delete transformedStyleArg.variants;
           transformedStyleArg = function transformedStyleArg(props) {
             var result = styleArg;
-            var variantStyles = variantsResolver(props, transformVariants(styledArgVariants), styledArgVariants);
+            var variantStyles = variantsResolver(
+              props,
+              transformVariants(styledArgVariants),
+              styledArgVariants
+            );
             variantStyles.forEach(function (variantStyle) {
               result = deepmerge(result, variantStyle);
             });
             return result;
           };
         }
-      } else if (typeof styleArg === 'function' &&
-      // On the server Emotion doesn't use React.forwardRef for creating components, so the created
-      // component stays as a function. This condition makes sure that we do not interpolate functions
-      // which are basically components used as a selectors.
-      styleArg.__emotion_real !== styleArg) {
+      } else if (
+        typeof styleArg === "function" &&
+        // On the server Emotion doesn't use React.forwardRef for creating components, so the created
+        // component stays as a function. This condition makes sure that we do not interpolate functions
+        // which are basically components used as a selectors.
+        styleArg.__emotion_real !== styleArg
+      ) {
         // If the type is function, we need to define the default theme.
         transformedStyleArg = function transformedStyleArg(props) {
           return muiStyledFunctionResolver({
             styledArg: styleArg,
             props: props,
             defaultTheme: defaultTheme,
-            themeId: themeId
+            themeId: themeId,
           });
         };
       }
       if (componentName && overridesResolver) {
         expressionsWithDefaultTheme.push(function (props) {
-          var theme = resolveTheme(_extends({}, props, {
-            defaultTheme: defaultTheme,
-            themeId: themeId
-          }));
+          var theme = resolveTheme(
+            _extends({}, props, {
+              defaultTheme: defaultTheme,
+              themeId: themeId,
+            })
+          );
           var styleOverrides = getStyleOverrides(componentName, theme);
           if (styleOverrides) {
             var resolvedStyleOverrides = {};
@@ -258,9 +357,14 @@ export default function createStyled() {
               var _ref4 = _slicedToArray(_ref3, 2),
                 slotKey = _ref4[0],
                 slotStyle = _ref4[1];
-              resolvedStyleOverrides[slotKey] = typeof slotStyle === 'function' ? slotStyle(_extends({}, props, {
-                theme: theme
-              })) : slotStyle;
+              resolvedStyleOverrides[slotKey] =
+                typeof slotStyle === "function"
+                  ? slotStyle(
+                      _extends({}, props, {
+                        theme: theme,
+                      })
+                    )
+                  : slotStyle;
             });
             return overridesResolver(props, resolvedStyleOverrides);
           }
@@ -269,28 +373,49 @@ export default function createStyled() {
       }
       if (componentName && !skipVariantsResolver) {
         expressionsWithDefaultTheme.push(function (props) {
-          var theme = resolveTheme(_extends({}, props, {
-            defaultTheme: defaultTheme,
-            themeId: themeId
-          }));
-          return themeVariantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
+          var theme = resolveTheme(
+            _extends({}, props, {
+              defaultTheme: defaultTheme,
+              themeId: themeId,
+            })
+          );
+          return themeVariantsResolver(
+            props,
+            getVariantStyles(componentName, theme),
+            theme,
+            componentName
+          );
         });
       }
       if (!skipSx) {
         expressionsWithDefaultTheme.push(systemSx);
       }
-      var numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
+      var numOfCustomFnsApplied =
+        expressionsWithDefaultTheme.length - expressions.length;
       if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
-        var placeholders = new Array(numOfCustomFnsApplied).fill('');
+        var placeholders = new Array(numOfCustomFnsApplied).fill("");
         // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.
-        transformedStyleArg = [].concat(_toConsumableArray(styleArg), _toConsumableArray(placeholders));
-        transformedStyleArg.raw = [].concat(_toConsumableArray(styleArg.raw), _toConsumableArray(placeholders));
+        transformedStyleArg = [].concat(
+          _toConsumableArray(styleArg),
+          _toConsumableArray(placeholders)
+        );
+        transformedStyleArg.raw = [].concat(
+          _toConsumableArray(styleArg.raw),
+          _toConsumableArray(placeholders)
+        );
       }
-      var Component = defaultStyledResolver.apply(void 0, [transformedStyleArg].concat(_toConsumableArray(expressionsWithDefaultTheme)));
-      if (process.env.NODE_ENV !== 'production') {
+      var Component = defaultStyledResolver.apply(
+        void 0,
+        [transformedStyleArg].concat(
+          _toConsumableArray(expressionsWithDefaultTheme)
+        )
+      );
+      if (process.env.NODE_ENV !== "production") {
         var displayName;
         if (componentName) {
-          displayName = "".concat(componentName).concat(capitalize(componentSlot || ''));
+          displayName = ""
+            .concat(componentName)
+            .concat(capitalize(componentSlot || ""));
         }
         if (displayName === undefined) {
           displayName = "Styled(".concat(getDisplayName(tag), ")");
diff --git a/modern/createStyled.js b/modern/createStyled.js
index 99f87f3d4a1bc270a0da6d7817454035f572fd57..f0f5832073cfbfaa2fe0698b767148a2a79771d7 100644
--- a/modern/createStyled.js
+++ b/modern/createStyled.js
@@ -1,34 +1,53 @@
 import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
 import _extends from "@babel/runtime/helpers/esm/extends";
-const _excluded = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
+const _excluded = [
+  "name",
+  "slot",
+  "skipVariantsResolver",
+  "skipSx",
+  "overridesResolver",
+];
 /* eslint-disable no-underscore-dangle */
-import styledEngineStyled, { internal_processStyles as processStyles } from '@mui/styled-engine';
-import { getDisplayName, unstable_capitalize as capitalize, isPlainObject, deepmerge } from '@mui/utils';
-import createTheme from './createTheme';
-import propsToClassKey from './propsToClassKey';
-import styleFunctionSx from './styleFunctionSx';
+import styledEngineStyled, {
+  internal_processStyles as processStyles,
+} from "@mui/styled-engine";
+import {
+  getDisplayName,
+  unstable_capitalize as capitalize,
+  isPlainObject,
+  deepmerge,
+} from "@mui/utils";
+import createTheme from "./createTheme";
+import propsToClassKey from "./propsToClassKey";
+import styleFunctionSx from "./styleFunctionSx";
 function isEmpty(obj) {
   return Object.keys(obj).length === 0;
 }
 
 // https://github.com/emotion-js/emotion/blob/26ded6109fcd8ca9875cc2ce4564fee678a3f3c5/packages/styled/src/utils.js#L40
 function isStringTag(tag) {
-  return typeof tag === 'string' &&
-  // 96 is one less than the char code
-  // for "a" so this is checking that
-  // it's a lowercase character
-  tag.charCodeAt(0) > 96;
+  return (
+    typeof tag === "string" &&
+    // 96 is one less than the char code
+    // for "a" so this is checking that
+    // it's a lowercase character
+    tag.charCodeAt(0) > 96
+  );
 }
 const getStyleOverrides = (name, theme) => {
-  if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
+  if (
+    theme.components &&
+    theme.components[name] &&
+    theme.components[name].styleOverrides
+  ) {
     return theme.components[name].styleOverrides;
   }
   return null;
 };
-const transformVariants = variants => {
+const transformVariants = (variants) => {
   const variantsStyles = {};
   if (variants) {
-    variants.forEach(definition => {
+    variants.forEach((definition) => {
       const key = propsToClassKey(definition.props);
       variantsStyles[key] = definition.style;
     });
@@ -37,21 +56,27 @@ const transformVariants = variants => {
 };
 const getVariantStyles = (name, theme) => {
   let variants = [];
-  if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
+  if (
+    theme &&
+    theme.components &&
+    theme.components[name] &&
+    theme.components[name].variants
+  ) {
     variants = theme.components[name].variants;
   }
   return transformVariants(variants);
 };
 const variantsResolver = (props, styles, variants) => {
-  const {
-    ownerState = {}
-  } = props;
+  const { ownerState = {} } = props;
   const variantsStyles = [];
   if (variants) {
-    variants.forEach(variant => {
+    variants.forEach((variant) => {
       let isMatch = true;
-      Object.keys(variant.props).forEach(key => {
-        if (ownerState[key] !== variant.props[key] && props[key] !== variant.props[key]) {
+      Object.keys(variant.props).forEach((key) => {
+        if (
+          ownerState[key] !== variant.props[key] &&
+          props[key] !== variant.props[key]
+        ) {
           isMatch = false;
         }
       });
@@ -69,20 +94,18 @@ const themeVariantsResolver = (props, styles, theme, name) => {
 
 // Update /system/styled/#api in case if this changes
 export function shouldForwardProp(prop) {
-  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
+  return (
+    prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as"
+  );
 }
 export const systemDefaultTheme = createTheme();
-const lowercaseFirstLetter = string => {
+const lowercaseFirstLetter = (string) => {
   if (!string) {
     return string;
   }
   return string.charAt(0).toLowerCase() + string.slice(1);
 };
-function resolveTheme({
-  defaultTheme,
-  theme,
-  themeId
-}) {
+function resolveTheme({ defaultTheme, theme, themeId }) {
   return isEmpty(theme) ? defaultTheme : theme[themeId] || theme;
 }
 function defaultOverridesResolver(slot) {
@@ -95,21 +118,29 @@ const muiStyledFunctionResolver = ({
   styledArg,
   props,
   defaultTheme,
-  themeId
+  themeId,
 }) => {
-  const resolvedStyles = styledArg(_extends({}, props, {
-    theme: resolveTheme(_extends({}, props, {
-      defaultTheme,
-      themeId
-    }))
-  }));
+  const resolvedStyles = styledArg(
+    _extends({}, props, {
+      theme: resolveTheme(
+        _extends({}, props, {
+          defaultTheme,
+          themeId,
+        })
+      ),
+    })
+  );
   let optionalVariants;
   if (resolvedStyles && resolvedStyles.variants) {
     optionalVariants = resolvedStyles.variants;
     delete resolvedStyles.variants;
   }
   if (optionalVariants) {
-    const variantsStyles = variantsResolver(props, transformVariants(optionalVariants), optionalVariants);
+    const variantsStyles = variantsResolver(
+      props,
+      transformVariants(optionalVariants),
+      optionalVariants
+    );
     return [resolvedStyles, ...variantsStyles];
   }
   return resolvedStyles;
@@ -119,20 +150,26 @@ export default function createStyled(input = {}) {
     themeId,
     defaultTheme = systemDefaultTheme,
     rootShouldForwardProp = shouldForwardProp,
-    slotShouldForwardProp = shouldForwardProp
+    slotShouldForwardProp = shouldForwardProp,
   } = input;
-  const systemSx = props => {
-    return styleFunctionSx(_extends({}, props, {
-      theme: resolveTheme(_extends({}, props, {
-        defaultTheme,
-        themeId
-      }))
-    }));
+  const systemSx = (props) => {
+    return styleFunctionSx(
+      _extends({}, props, {
+        theme: resolveTheme(
+          _extends({}, props, {
+            defaultTheme,
+            themeId,
+          })
+        ),
+      })
+    );
   };
   systemSx.__mui_systemSx = true;
   return (tag, inputOptions = {}) => {
     // Filter out the `sx` style function from the previous styled component to prevent unnecessary styles generated by the composite components.
-    processStyles(tag, styles => styles.filter(style => !style?.__mui_systemSx));
+    processStyles(tag, (styles) =>
+      styles.filter((style) => !style?.__mui_systemSx)
+    );
     const {
         name: componentName,
         slot: componentSlot,
@@ -140,29 +177,38 @@ export default function createStyled(input = {}) {
         skipSx: inputSkipSx,
         // TODO v6: remove `lowercaseFirstLetter()` in the next major release
         // For more details: https://github.com/mui/material-ui/pull/37908
-        overridesResolver = defaultOverridesResolver(lowercaseFirstLetter(componentSlot))
+        overridesResolver = defaultOverridesResolver(
+          lowercaseFirstLetter(componentSlot)
+        ),
       } = inputOptions,
       options = _objectWithoutPropertiesLoose(inputOptions, _excluded);
 
     // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
-    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver :
-    // TODO v6: remove `Root` in the next major release
-    // For more details: https://github.com/mui/material-ui/pull/37908
-    componentSlot && componentSlot !== 'Root' && componentSlot !== 'root' || false;
+    const skipVariantsResolver =
+      inputSkipVariantsResolver !== undefined
+        ? inputSkipVariantsResolver
+        : // TODO v6: remove `Root` in the next major release
+          // For more details: https://github.com/mui/material-ui/pull/37908
+          (componentSlot &&
+            componentSlot !== "Root" &&
+            componentSlot !== "root") ||
+          false;
     const skipSx = inputSkipSx || false;
     let label;
-    if (process.env.NODE_ENV !== 'production') {
-      if (componentName) {
-        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
-        // For more details: https://github.com/mui/material-ui/pull/37908
-        label = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;
-      }
+    //if (process.env.NODE_ENV !== 'production') {
+    if (componentName) {
+      // TODO v6: remove `lowercaseFirstLetter()` in the next major release
+      // For more details: https://github.com/mui/material-ui/pull/37908
+      label = `${componentName}-${lowercaseFirstLetter(
+        componentSlot || "Root"
+      )}`;
     }
+    //    }
     let shouldForwardPropOption = shouldForwardProp;
 
     // TODO v6: remove `Root` in the next major release
     // For more details: https://github.com/mui/material-ui/pull/37908
-    if (componentSlot === 'Root' || componentSlot === 'root') {
+    if (componentSlot === "Root" || componentSlot === "root") {
       shouldForwardPropOption = rootShouldForwardProp;
     } else if (componentSlot) {
       // any other slot specified
@@ -171,83 +217,113 @@ export default function createStyled(input = {}) {
       // for string (html) tag, preserve the behavior in emotion & styled-components.
       shouldForwardPropOption = undefined;
     }
-    const defaultStyledResolver = styledEngineStyled(tag, _extends({
-      shouldForwardProp: shouldForwardPropOption,
-      label
-    }, options));
+    const defaultStyledResolver = styledEngineStyled(
+      tag,
+      _extends(
+        {
+          shouldForwardProp: shouldForwardPropOption,
+          label,
+        },
+        options
+      )
+    );
     const muiStyledResolver = (styleArg, ...expressions) => {
-      const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {
-        // On the server Emotion doesn't use React.forwardRef for creating components, so the created
-        // component stays as a function. This condition makes sure that we do not interpolate functions
-        // which are basically components used as a selectors.
-        if (typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg) {
-          return props => muiStyledFunctionResolver({
-            styledArg: stylesArg,
-            props,
-            defaultTheme,
-            themeId
-          });
-        }
-        if (isPlainObject(stylesArg)) {
-          let transformedStylesArg = stylesArg;
-          let styledArgVariants;
-          if (stylesArg && stylesArg.variants) {
-            styledArgVariants = stylesArg.variants;
-            delete transformedStylesArg.variants;
-            transformedStylesArg = props => {
-              let result = stylesArg;
-              const variantStyles = variantsResolver(props, transformVariants(styledArgVariants), styledArgVariants);
-              variantStyles.forEach(variantStyle => {
-                result = deepmerge(result, variantStyle);
-              });
-              return result;
-            };
-          }
-          return transformedStylesArg;
-        }
-        return stylesArg;
-      }) : [];
+      const expressionsWithDefaultTheme = expressions
+        ? expressions.map((stylesArg) => {
+            // On the server Emotion doesn't use React.forwardRef for creating components, so the created
+            // component stays as a function. This condition makes sure that we do not interpolate functions
+            // which are basically components used as a selectors.
+            if (
+              typeof stylesArg === "function" &&
+              stylesArg.__emotion_real !== stylesArg
+            ) {
+              return (props) =>
+                muiStyledFunctionResolver({
+                  styledArg: stylesArg,
+                  props,
+                  defaultTheme,
+                  themeId,
+                });
+            }
+            if (isPlainObject(stylesArg)) {
+              let transformedStylesArg = stylesArg;
+              let styledArgVariants;
+              if (stylesArg && stylesArg.variants) {
+                styledArgVariants = stylesArg.variants;
+                delete transformedStylesArg.variants;
+                transformedStylesArg = (props) => {
+                  let result = stylesArg;
+                  const variantStyles = variantsResolver(
+                    props,
+                    transformVariants(styledArgVariants),
+                    styledArgVariants
+                  );
+                  variantStyles.forEach((variantStyle) => {
+                    result = deepmerge(result, variantStyle);
+                  });
+                  return result;
+                };
+              }
+              return transformedStylesArg;
+            }
+            return stylesArg;
+          })
+        : [];
       let transformedStyleArg = styleArg;
       if (isPlainObject(styleArg)) {
         let styledArgVariants;
         if (styleArg && styleArg.variants) {
           styledArgVariants = styleArg.variants;
           delete transformedStyleArg.variants;
-          transformedStyleArg = props => {
+          transformedStyleArg = (props) => {
             let result = styleArg;
-            const variantStyles = variantsResolver(props, transformVariants(styledArgVariants), styledArgVariants);
-            variantStyles.forEach(variantStyle => {
+            const variantStyles = variantsResolver(
+              props,
+              transformVariants(styledArgVariants),
+              styledArgVariants
+            );
+            variantStyles.forEach((variantStyle) => {
               result = deepmerge(result, variantStyle);
             });
             return result;
           };
         }
-      } else if (typeof styleArg === 'function' &&
-      // On the server Emotion doesn't use React.forwardRef for creating components, so the created
-      // component stays as a function. This condition makes sure that we do not interpolate functions
-      // which are basically components used as a selectors.
-      styleArg.__emotion_real !== styleArg) {
+      } else if (
+        typeof styleArg === "function" &&
+        // On the server Emotion doesn't use React.forwardRef for creating components, so the created
+        // component stays as a function. This condition makes sure that we do not interpolate functions
+        // which are basically components used as a selectors.
+        styleArg.__emotion_real !== styleArg
+      ) {
         // If the type is function, we need to define the default theme.
-        transformedStyleArg = props => muiStyledFunctionResolver({
-          styledArg: styleArg,
-          props,
-          defaultTheme,
-          themeId
-        });
+        transformedStyleArg = (props) =>
+          muiStyledFunctionResolver({
+            styledArg: styleArg,
+            props,
+            defaultTheme,
+            themeId,
+          });
       }
       if (componentName && overridesResolver) {
-        expressionsWithDefaultTheme.push(props => {
-          const theme = resolveTheme(_extends({}, props, {
-            defaultTheme,
-            themeId
-          }));
+        expressionsWithDefaultTheme.push((props) => {
+          const theme = resolveTheme(
+            _extends({}, props, {
+              defaultTheme,
+              themeId,
+            })
+          );
           const styleOverrides = getStyleOverrides(componentName, theme);
           if (styleOverrides) {
             const resolvedStyleOverrides = {};
             Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
-              resolvedStyleOverrides[slotKey] = typeof slotStyle === 'function' ? slotStyle(_extends({}, props, {
-                theme
-              })) : slotStyle;
+              resolvedStyleOverrides[slotKey] =
+                typeof slotStyle === "function"
+                  ? slotStyle(
+                      _extends({}, props, {
+                        theme,
+                      })
+                    )
+                  : slotStyle;
             });
             return overridesResolver(props, resolvedStyleOverrides);
           }
@@ -255,29 +331,40 @@ export default function createStyled(input = {}) {
         });
       }
       if (componentName && !skipVariantsResolver) {
-        expressionsWithDefaultTheme.push(props => {
-          const theme = resolveTheme(_extends({}, props, {
-            defaultTheme,
-            themeId
-          }));
-          return themeVariantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
+        expressionsWithDefaultTheme.push((props) => {
+          const theme = resolveTheme(
+            _extends({}, props, {
+              defaultTheme,
+              themeId,
+            })
+          );
+          return themeVariantsResolver(
+            props,
+            getVariantStyles(componentName, theme),
+            theme,
+            componentName
+          );
         });
       }
       if (!skipSx) {
         expressionsWithDefaultTheme.push(systemSx);
       }
-      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
+      const numOfCustomFnsApplied =
+        expressionsWithDefaultTheme.length - expressions.length;
       if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
-        const placeholders = new Array(numOfCustomFnsApplied).fill('');
+        const placeholders = new Array(numOfCustomFnsApplied).fill("");
         // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.
         transformedStyleArg = [...styleArg, ...placeholders];
         transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
       }
-      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
-      if (process.env.NODE_ENV !== 'production') {
+      const Component = defaultStyledResolver(
+        transformedStyleArg,
+        ...expressionsWithDefaultTheme
+      );
+      if (process.env.NODE_ENV !== "production") {
         let displayName;
         if (componentName) {
-          displayName = `${componentName}${capitalize(componentSlot || '')}`;
+          displayName = `${componentName}${capitalize(componentSlot || "")}`;
         }
         if (displayName === undefined) {
           displayName = `Styled(${getDisplayName(tag)})`;

diff --git a/createStyled.js b/createStyled.js
index 3eeece45a4cd91c1dc5d9ac33d953cc54c5fb725..cb12cba50e9c8d4b7811b953d2864e65bf562a26 100644
--- a/createStyled.js
+++ b/createStyled.js
@@ -2,47 +2,106 @@
 
 var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
 Object.defineProperty(exports, "__esModule", {
-  value: true
+  value: true,
 });
 exports.default = createStyled;
 exports.shouldForwardProp = shouldForwardProp;
 exports.systemDefaultTheme = void 0;
-var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
-var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
+var _objectWithoutPropertiesLoose2 = _interopRequireDefault(
+  require("@babel/runtime/helpers/objectWithoutPropertiesLoose")
+);
+var _extends2 = _interopRequireDefault(
+  require("@babel/runtime/helpers/extends")
+);
 var _styledEngine = _interopRequireWildcard(require("@mui/styled-engine"));
 var _utils = require("@mui/utils");
 var _createTheme = _interopRequireDefault(require("./createTheme"));
 var _propsToClassKey = _interopRequireDefault(require("./propsToClassKey"));
 var _styleFunctionSx = _interopRequireDefault(require("./styleFunctionSx"));
-const _excluded = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
+const _excluded = [
+  "name",
+  "slot",
+  "skipVariantsResolver",
+  "skipSx",
+  "overridesResolver",
+];
 /* eslint-disable no-underscore-dangle */
-function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
-function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
+function _getRequireWildcardCache(nodeInterop) {
+  if (typeof WeakMap !== "function") return null;
+  var cacheBabelInterop = new WeakMap();
+  var cacheNodeInterop = new WeakMap();
+  return (_getRequireWildcardCache = function (nodeInterop) {
+    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
+  })(nodeInterop);
+}
+function _interopRequireWildcard(obj, nodeInterop) {
+  if (!nodeInterop && obj && obj.__esModule) {
+    return obj;
+  }
+  if (obj === null || (typeof obj !== "object" && typeof obj !== "function")) {
+    return { default: obj };
+  }
+  var cache = _getRequireWildcardCache(nodeInterop);
+  if (cache && cache.has(obj)) {
+    return cache.get(obj);
+  }
+  var newObj = {};
+  var hasPropertyDescriptor =
+    Object.defineProperty && Object.getOwnPropertyDescriptor;
+  for (var key in obj) {
+    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
+      var desc = hasPropertyDescriptor
+        ? Object.getOwnPropertyDescriptor(obj, key)
+        : null;
+      if (desc && (desc.get || desc.set)) {
+        Object.defineProperty(newObj, key, desc);
+      } else {
+        newObj[key] = obj[key];
+      }
+    }
+  }
+  newObj.default = obj;
+  if (cache) {
+    cache.set(obj, newObj);
+  }
+  return newObj;
+}
 function isEmpty(obj) {
   return Object.keys(obj).length === 0;
 }
 
 // https://github.com/emotion-js/emotion/blob/26ded6109fcd8ca9875cc2ce4564fee678a3f3c5/packages/styled/src/utils.js#L40
 function isStringTag(tag) {
-  return typeof tag === 'string' &&
-  // 96 is one less than the char code
-  // for "a" so this is checking that
-  // it's a lowercase character
-  tag.charCodeAt(0) > 96;
+  return (
+    typeof tag === "string" &&
+    // 96 is one less than the char code
+    // for "a" so this is checking that
+    // it's a lowercase character
+    tag.charCodeAt(0) > 96
+  );
 }
 const getStyleOverrides = (name, theme) => {
-  if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
+  if (
+    theme.components &&
+    theme.components[name] &&
+    theme.components[name].styleOverrides
+  ) {
     return theme.components[name].styleOverrides;
   }
   return null;
 };
 const getVariantStyles = (name, theme) => {
   let variants = [];
-  if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
+  if (
+    theme &&
+    theme.components &&
+    theme.components[name] &&
+    theme.components[name].variants
+  ) {
     variants = theme.components[name].variants;
   }
   const variantsStyles = {};
-  variants.forEach(definition => {
+  variants.forEach((definition) => {
     const key = (0, _propsToClassKey.default)(definition.props);
     variantsStyles[key] = definition.style;
   });
@@ -50,21 +109,29 @@ const getVariantStyles = (name, theme) => {
 };
 const variantsResolver = (props, styles, theme, name) => {
   var _theme$components;
-  const {
-    ownerState = {}
-  } = props;
+  const { ownerState = {} } = props;
   const variantsStyles = [];
-  const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[name]) == null ? void 0 : _theme$components.variants;
+  const themeVariants =
+    theme == null ||
+    (_theme$components = theme.components) == null ||
+    (_theme$components = _theme$components[name]) == null
+      ? void 0
+      : _theme$components.variants;
   if (themeVariants) {
-    themeVariants.forEach(themeVariant => {
+    themeVariants.forEach((themeVariant) => {
       let isMatch = true;
-      Object.keys(themeVariant.props).forEach(key => {
-        if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
+      Object.keys(themeVariant.props).forEach((key) => {
+        if (
+          ownerState[key] !== themeVariant.props[key] &&
+          props[key] !== themeVariant.props[key]
+        ) {
           isMatch = false;
         }
       });
       if (isMatch) {
-        variantsStyles.push(styles[(0, _propsToClassKey.default)(themeVariant.props)]);
+        variantsStyles.push(
+          styles[(0, _propsToClassKey.default)(themeVariant.props)]
+        );
       }
     });
   }
@@ -73,21 +140,19 @@ const variantsResolver = (props, styles, theme, name) => {
 
 // Update /system/styled/#api in case if this changes
 function shouldForwardProp(prop) {
-  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
+  return (
+    prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as"
+  );
 }
 const systemDefaultTheme = (0, _createTheme.default)();
 exports.systemDefaultTheme = systemDefaultTheme;
-const lowercaseFirstLetter = string => {
+const lowercaseFirstLetter = (string) => {
   if (!string) {
     return string;
   }
   return string.charAt(0).toLowerCase() + string.slice(1);
 };
-function resolveTheme({
-  defaultTheme,
-  theme,
-  themeId
-}) {
+function resolveTheme({ defaultTheme, theme, themeId }) {
   return isEmpty(theme) ? defaultTheme : theme[themeId] || theme;
 }
 function defaultOverridesResolver(slot) {
@@ -101,20 +166,26 @@ function createStyled(input = {}) {
     themeId,
     defaultTheme = systemDefaultTheme,
     rootShouldForwardProp = shouldForwardProp,
-    slotShouldForwardProp = shouldForwardProp
+    slotShouldForwardProp = shouldForwardProp,
   } = input;
-  const systemSx = props => {
-    return (0, _styleFunctionSx.default)((0, _extends2.default)({}, props, {
-      theme: resolveTheme((0, _extends2.default)({}, props, {
-        defaultTheme,
-        themeId
-      }))
-    }));
+  const systemSx = (props) => {
+    return (0, _styleFunctionSx.default)(
+      (0, _extends2.default)({}, props, {
+        theme: resolveTheme(
+          (0, _extends2.default)({}, props, {
+            defaultTheme,
+            themeId,
+          })
+        ),
+      })
+    );
   };
   systemSx.__mui_systemSx = true;
   return (tag, inputOptions = {}) => {
     // Filter out the `sx` style function from the previous styled component to prevent unnecessary styles generated by the composite components.
-    (0, _styledEngine.internal_processStyles)(tag, styles => styles.filter(style => !(style != null && style.__mui_systemSx)));
+    (0, _styledEngine.internal_processStyles)(tag, (styles) =>
+      styles.filter((style) => !(style != null && style.__mui_systemSx))
+    );
     const {
         name: componentName,
         slot: componentSlot,
@@ -122,29 +193,39 @@ function createStyled(input = {}) {
         skipSx: inputSkipSx,
         // TODO v6: remove `lowercaseFirstLetter()` in the next major release
         // For more details: https://github.com/mui/material-ui/pull/37908
-        overridesResolver = defaultOverridesResolver(lowercaseFirstLetter(componentSlot))
+        overridesResolver = defaultOverridesResolver(
+          lowercaseFirstLetter(componentSlot)
+        ),
       } = inputOptions,
-      options = (0, _objectWithoutPropertiesLoose2.default)(inputOptions, _excluded);
+      options = (0, _objectWithoutPropertiesLoose2.default)(
+        inputOptions,
+        _excluded
+      );
 
     // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
-    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver :
-    // TODO v6: remove `Root` in the next major release
-    // For more details: https://github.com/mui/material-ui/pull/37908
-    componentSlot && componentSlot !== 'Root' && componentSlot !== 'root' || false;
+    const skipVariantsResolver =
+      inputSkipVariantsResolver !== undefined
+        ? inputSkipVariantsResolver
+        : // TODO v6: remove `Root` in the next major release
+          // For more details: https://github.com/mui/material-ui/pull/37908
+          (componentSlot &&
+            componentSlot !== "Root" &&
+            componentSlot !== "root") ||
+          false;
     const skipSx = inputSkipSx || false;
     let label;
-    if (process.env.NODE_ENV !== 'production') {
-      if (componentName) {
-        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
-        // For more details: https://github.com/mui/material-ui/pull/37908
-        label = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;
-      }
+    if (componentName) {
+      // TODO v6: remove `lowercaseFirstLetter()` in the next major release
+      // For more details: https://github.com/mui/material-ui/pull/37908
+      label = `${componentName}-${lowercaseFirstLetter(
+        componentSlot || "Root"
+      )}`;
     }
     let shouldForwardPropOption = shouldForwardProp;
 
     // TODO v6: remove `Root` in the next major release
     // For more details: https://github.com/mui/material-ui/pull/37908
-    if (componentSlot === 'Root' || componentSlot === 'root') {
+    if (componentSlot === "Root" || componentSlot === "root") {
       shouldForwardPropOption = rootShouldForwardProp;
     } else if (componentSlot) {
       // any other slot specified
@@ -153,38 +234,60 @@ function createStyled(input = {}) {
       // for string (html) tag, preserve the behavior in emotion & styled-components.
       shouldForwardPropOption = undefined;
     }
-    const defaultStyledResolver = (0, _styledEngine.default)(tag, (0, _extends2.default)({
-      shouldForwardProp: shouldForwardPropOption,
-      label
-    }, options));
+    const defaultStyledResolver = (0, _styledEngine.default)(
+      tag,
+      (0, _extends2.default)(
+        {
+          shouldForwardProp: shouldForwardPropOption,
+          label,
+        },
+        options
+      )
+    );
     const muiStyledResolver = (styleArg, ...expressions) => {
-      const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {
-        // On the server Emotion doesn't use React.forwardRef for creating components, so the created
-        // component stays as a function. This condition makes sure that we do not interpolate functions
-        // which are basically components used as a selectors.
-        return typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg ? props => {
-          return stylesArg((0, _extends2.default)({}, props, {
-            theme: resolveTheme((0, _extends2.default)({}, props, {
-              defaultTheme,
-              themeId
-            }))
-          }));
-        } : stylesArg;
-      }) : [];
+      const expressionsWithDefaultTheme = expressions
+        ? expressions.map((stylesArg) => {
+            // On the server Emotion doesn't use React.forwardRef for creating components, so the created
+            // component stays as a function. This condition makes sure that we do not interpolate functions
+            // which are basically components used as a selectors.
+            return typeof stylesArg === "function" &&
+              stylesArg.__emotion_real !== stylesArg
+              ? (props) => {
+                  return stylesArg(
+                    (0, _extends2.default)({}, props, {
+                      theme: resolveTheme(
+                        (0, _extends2.default)({}, props, {
+                          defaultTheme,
+                          themeId,
+                        })
+                      ),
+                    })
+                  );
+                }
+              : stylesArg;
+          })
+        : [];
       let transformedStyleArg = styleArg;
       if (componentName && overridesResolver) {
-        expressionsWithDefaultTheme.push(props => {
-          const theme = resolveTheme((0, _extends2.default)({}, props, {
-            defaultTheme,
-            themeId
-          }));
+        expressionsWithDefaultTheme.push((props) => {
+          const theme = resolveTheme(
+            (0, _extends2.default)({}, props, {
+              defaultTheme,
+              themeId,
+            })
+          );
           const styleOverrides = getStyleOverrides(componentName, theme);
           if (styleOverrides) {
             const resolvedStyleOverrides = {};
             Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
-              resolvedStyleOverrides[slotKey] = typeof slotStyle === 'function' ? slotStyle((0, _extends2.default)({}, props, {
-                theme
-              })) : slotStyle;
+              resolvedStyleOverrides[slotKey] =
+                typeof slotStyle === "function"
+                  ? slotStyle(
+                      (0, _extends2.default)({}, props, {
+                        theme,
+                      })
+                    )
+                  : slotStyle;
             });
             return overridesResolver(props, resolvedStyleOverrides);
           }
@@ -192,41 +295,61 @@ function createStyled(input = {}) {
         });
       }
       if (componentName && !skipVariantsResolver) {
-        expressionsWithDefaultTheme.push(props => {
-          const theme = resolveTheme((0, _extends2.default)({}, props, {
-            defaultTheme,
-            themeId
-          }));
-          return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
+        expressionsWithDefaultTheme.push((props) => {
+          const theme = resolveTheme(
+            (0, _extends2.default)({}, props, {
+              defaultTheme,
+              themeId,
+            })
+          );
+          return variantsResolver(
+            props,
+            getVariantStyles(componentName, theme),
+            theme,
+            componentName
+          );
         });
       }
       if (!skipSx) {
         expressionsWithDefaultTheme.push(systemSx);
       }
-      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
+      const numOfCustomFnsApplied =
+        expressionsWithDefaultTheme.length - expressions.length;
       if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
-        const placeholders = new Array(numOfCustomFnsApplied).fill('');
+        const placeholders = new Array(numOfCustomFnsApplied).fill("");
         // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.
         transformedStyleArg = [...styleArg, ...placeholders];
         transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
-      } else if (typeof styleArg === 'function' &&
-      // On the server Emotion doesn't use React.forwardRef for creating components, so the created
-      // component stays as a function. This condition makes sure that we do not interpolate functions
-      // which are basically components used as a selectors.
-      styleArg.__emotion_real !== styleArg) {
+      } else if (
+        typeof styleArg === "function" &&
+        // On the server Emotion doesn't use React.forwardRef for creating components, so the created
+        // component stays as a function. This condition makes sure that we do not interpolate functions
+        // which are basically components used as a selectors.
+        styleArg.__emotion_real !== styleArg
+      ) {
         // If the type is function, we need to define the default theme.
-        transformedStyleArg = props => styleArg((0, _extends2.default)({}, props, {
-          theme: resolveTheme((0, _extends2.default)({}, props, {
-            defaultTheme,
-            themeId
-          }))
-        }));
+        transformedStyleArg = (props) =>
+          styleArg(
+            (0, _extends2.default)({}, props, {
+              theme: resolveTheme(
+                (0, _extends2.default)({}, props, {
+                  defaultTheme,
+                  themeId,
+                })
+              ),
+            })
+          );
       }
-      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
-      if (process.env.NODE_ENV !== 'production') {
+      const Component = defaultStyledResolver(
+        transformedStyleArg,
+        ...expressionsWithDefaultTheme
+      );
+      if (process.env.NODE_ENV !== "production") {
         let displayName;
         if (componentName) {
-          displayName = `${componentName}${(0, _utils.unstable_capitalize)(componentSlot || '')}`;
+          displayName = `${componentName}${(0, _utils.unstable_capitalize)(
+            componentSlot || ""
+          )}`;
         }
         if (displayName === undefined) {
           displayName = `Styled(${(0, _utils.getDisplayName)(tag)})`;
diff --git a/esm/createStyled.js b/esm/createStyled.js
index 3d2709581c987d415338974006de14fb9d588a4b..432eb06443795d4e019ae89bcd78dd0270991497 100644
--- a/esm/createStyled.js
+++ b/esm/createStyled.js
@@ -1,37 +1,56 @@
 import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
 import _extends from "@babel/runtime/helpers/esm/extends";
-const _excluded = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
+const _excluded = [
+  "name",
+  "slot",
+  "skipVariantsResolver",
+  "skipSx",
+  "overridesResolver",
+];
 /* eslint-disable no-underscore-dangle */
-import styledEngineStyled, { internal_processStyles as processStyles } from '@mui/styled-engine';
-import { getDisplayName, unstable_capitalize as capitalize } from '@mui/utils';
-import createTheme from './createTheme';
-import propsToClassKey from './propsToClassKey';
-import styleFunctionSx from './styleFunctionSx';
+import styledEngineStyled, {
+  internal_processStyles as processStyles,
+} from "@mui/styled-engine";
+import { getDisplayName, unstable_capitalize as capitalize } from "@mui/utils";
+import createTheme from "./createTheme";
+import propsToClassKey from "./propsToClassKey";
+import styleFunctionSx from "./styleFunctionSx";
 function isEmpty(obj) {
   return Object.keys(obj).length === 0;
 }
 
 // https://github.com/emotion-js/emotion/blob/26ded6109fcd8ca9875cc2ce4564fee678a3f3c5/packages/styled/src/utils.js#L40
 function isStringTag(tag) {
-  return typeof tag === 'string' &&
-  // 96 is one less than the char code
-  // for "a" so this is checking that
-  // it's a lowercase character
-  tag.charCodeAt(0) > 96;
+  return (
+    typeof tag === "string" &&
+    // 96 is one less than the char code
+    // for "a" so this is checking that
+    // it's a lowercase character
+    tag.charCodeAt(0) > 96
+  );
 }
 const getStyleOverrides = (name, theme) => {
-  if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
+  if (
+    theme.components &&
+    theme.components[name] &&
+    theme.components[name].styleOverrides
+  ) {
     return theme.components[name].styleOverrides;
   }
   return null;
 };
 const getVariantStyles = (name, theme) => {
   let variants = [];
-  if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
+  if (
+    theme &&
+    theme.components &&
+    theme.components[name] &&
+    theme.components[name].variants
+  ) {
     variants = theme.components[name].variants;
   }
   const variantsStyles = {};
-  variants.forEach(definition => {
+  variants.forEach((definition) => {
     const key = propsToClassKey(definition.props);
     variantsStyles[key] = definition.style;
   });
@@ -39,16 +58,22 @@ const getVariantStyles = (name, theme) => {
 };
 const variantsResolver = (props, styles, theme, name) => {
   var _theme$components;
-  const {
-    ownerState = {}
-  } = props;
+  const { ownerState = {} } = props;
   const variantsStyles = [];
-  const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[name]) == null ? void 0 : _theme$components.variants;
+  const themeVariants =
+    theme == null ||
+    (_theme$components = theme.components) == null ||
+    (_theme$components = _theme$components[name]) == null
+      ? void 0
+      : _theme$components.variants;
   if (themeVariants) {
-    themeVariants.forEach(themeVariant => {
+    themeVariants.forEach((themeVariant) => {
       let isMatch = true;
-      Object.keys(themeVariant.props).forEach(key => {
-        if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
+      Object.keys(themeVariant.props).forEach((key) => {
+        if (
+          ownerState[key] !== themeVariant.props[key] &&
+          props[key] !== themeVariant.props[key]
+        ) {
           isMatch = false;
         }
       });
@@ -62,20 +87,18 @@ const variantsResolver = (props, styles, theme, name) => {
 
 // Update /system/styled/#api in case if this changes
 export function shouldForwardProp(prop) {
-  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
+  return (
+    prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as"
+  );
 }
 export const systemDefaultTheme = createTheme();
-const lowercaseFirstLetter = string => {
+const lowercaseFirstLetter = (string) => {
   if (!string) {
     return string;
   }
   return string.charAt(0).toLowerCase() + string.slice(1);
 };
-function resolveTheme({
-  defaultTheme,
-  theme,
-  themeId
-}) {
+function resolveTheme({ defaultTheme, theme, themeId }) {
   return isEmpty(theme) ? defaultTheme : theme[themeId] || theme;
 }
 function defaultOverridesResolver(slot) {
@@ -89,20 +112,26 @@ export default function createStyled(input = {}) {
     themeId,
     defaultTheme = systemDefaultTheme,
     rootShouldForwardProp = shouldForwardProp,
-    slotShouldForwardProp = shouldForwardProp
+    slotShouldForwardProp = shouldForwardProp,
   } = input;
-  const systemSx = props => {
-    return styleFunctionSx(_extends({}, props, {
-      theme: resolveTheme(_extends({}, props, {
-        defaultTheme,
-        themeId
-      }))
-    }));
+  const systemSx = (props) => {
+    return styleFunctionSx(
+      _extends({}, props, {
+        theme: resolveTheme(
+          _extends({}, props, {
+            defaultTheme,
+            themeId,
+          })
+        ),
+      })
+    );
   };
   systemSx.__mui_systemSx = true;
   return (tag, inputOptions = {}) => {
     // Filter out the `sx` style function from the previous styled component to prevent unnecessary styles generated by the composite components.
-    processStyles(tag, styles => styles.filter(style => !(style != null && style.__mui_systemSx)));
+    processStyles(tag, (styles) =>
+      styles.filter((style) => !(style != null && style.__mui_systemSx))
+    );
     const {
         name: componentName,
         slot: componentSlot,
@@ -110,29 +139,36 @@ export default function createStyled(input = {}) {
         skipSx: inputSkipSx,
         // TODO v6: remove `lowercaseFirstLetter()` in the next major release
         // For more details: https://github.com/mui/material-ui/pull/37908
-        overridesResolver = defaultOverridesResolver(lowercaseFirstLetter(componentSlot))
+        overridesResolver = defaultOverridesResolver(
+          lowercaseFirstLetter(componentSlot)
+        ),
       } = inputOptions,
       options = _objectWithoutPropertiesLoose(inputOptions, _excluded);
 
     // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
-    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver :
-    // TODO v6: remove `Root` in the next major release
-    // For more details: https://github.com/mui/material-ui/pull/37908
-    componentSlot && componentSlot !== 'Root' && componentSlot !== 'root' || false;
+    const skipVariantsResolver =
+      inputSkipVariantsResolver !== undefined
+        ? inputSkipVariantsResolver
+        : // TODO v6: remove `Root` in the next major release
+          // For more details: https://github.com/mui/material-ui/pull/37908
+          (componentSlot &&
+            componentSlot !== "Root" &&
+            componentSlot !== "root") ||
+          false;
     const skipSx = inputSkipSx || false;
     let label;
-    if (process.env.NODE_ENV !== 'production') {
-      if (componentName) {
-        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
-        // For more details: https://github.com/mui/material-ui/pull/37908
-        label = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;
-      }
+    if (componentName) {
+      // TODO v6: remove `lowercaseFirstLetter()` in the next major release
+      // For more details: https://github.com/mui/material-ui/pull/37908
+      label = `${componentName}-${lowercaseFirstLetter(
+        componentSlot || "Root"
+      )}`;
     }
     let shouldForwardPropOption = shouldForwardProp;
 
     // TODO v6: remove `Root` in the next major release
     // For more details: https://github.com/mui/material-ui/pull/37908
-    if (componentSlot === 'Root' || componentSlot === 'root') {
+    if (componentSlot === "Root" || componentSlot === "root") {
       shouldForwardPropOption = rootShouldForwardProp;
     } else if (componentSlot) {
       // any other slot specified
@@ -141,38 +177,60 @@ export default function createStyled(input = {}) {
       // for string (html) tag, preserve the behavior in emotion & styled-components.
       shouldForwardPropOption = undefined;
     }
-    const defaultStyledResolver = styledEngineStyled(tag, _extends({
-      shouldForwardProp: shouldForwardPropOption,
-      label
-    }, options));
+    const defaultStyledResolver = styledEngineStyled(
+      tag,
+      _extends(
+        {
+          shouldForwardProp: shouldForwardPropOption,
+          label,
+        },
+        options
+      )
+    );
     const muiStyledResolver = (styleArg, ...expressions) => {
-      const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {
-        // On the server Emotion doesn't use React.forwardRef for creating components, so the created
-        // component stays as a function. This condition makes sure that we do not interpolate functions
-        // which are basically components used as a selectors.
-        return typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg ? props => {
-          return stylesArg(_extends({}, props, {
-            theme: resolveTheme(_extends({}, props, {
-              defaultTheme,
-              themeId
-            }))
-          }));
-        } : stylesArg;
-      }) : [];
+      const expressionsWithDefaultTheme = expressions
+        ? expressions.map((stylesArg) => {
+            // On the server Emotion doesn't use React.forwardRef for creating components, so the created
+            // component stays as a function. This condition makes sure that we do not interpolate functions
+            // which are basically components used as a selectors.
+            return typeof stylesArg === "function" &&
+              stylesArg.__emotion_real !== stylesArg
+              ? (props) => {
+                  return stylesArg(
+                    _extends({}, props, {
+                      theme: resolveTheme(
+                        _extends({}, props, {
+                          defaultTheme,
+                          themeId,
+                        })
+                      ),
+                    })
+                  );
+                }
+              : stylesArg;
+          })
+        : [];
       let transformedStyleArg = styleArg;
       if (componentName && overridesResolver) {
-        expressionsWithDefaultTheme.push(props => {
-          const theme = resolveTheme(_extends({}, props, {
-            defaultTheme,
-            themeId
-          }));
+        expressionsWithDefaultTheme.push((props) => {
+          const theme = resolveTheme(
+            _extends({}, props, {
+              defaultTheme,
+              themeId,
+            })
+          );
           const styleOverrides = getStyleOverrides(componentName, theme);
           if (styleOverrides) {
             const resolvedStyleOverrides = {};
             Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
-              resolvedStyleOverrides[slotKey] = typeof slotStyle === 'function' ? slotStyle(_extends({}, props, {
-                theme
-              })) : slotStyle;
+              resolvedStyleOverrides[slotKey] =
+                typeof slotStyle === "function"
+                  ? slotStyle(
+                      _extends({}, props, {
+                        theme,
+                      })
+                    )
+                  : slotStyle;
             });
             return overridesResolver(props, resolvedStyleOverrides);
           }
@@ -180,41 +238,59 @@ export default function createStyled(input = {}) {
         });
       }
       if (componentName && !skipVariantsResolver) {
-        expressionsWithDefaultTheme.push(props => {
-          const theme = resolveTheme(_extends({}, props, {
-            defaultTheme,
-            themeId
-          }));
-          return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
+        expressionsWithDefaultTheme.push((props) => {
+          const theme = resolveTheme(
+            _extends({}, props, {
+              defaultTheme,
+              themeId,
+            })
+          );
+          return variantsResolver(
+            props,
+            getVariantStyles(componentName, theme),
+            theme,
+            componentName
+          );
         });
       }
       if (!skipSx) {
         expressionsWithDefaultTheme.push(systemSx);
       }
-      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
+      const numOfCustomFnsApplied =
+        expressionsWithDefaultTheme.length - expressions.length;
       if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
-        const placeholders = new Array(numOfCustomFnsApplied).fill('');
+        const placeholders = new Array(numOfCustomFnsApplied).fill("");
         // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.
         transformedStyleArg = [...styleArg, ...placeholders];
         transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
-      } else if (typeof styleArg === 'function' &&
-      // On the server Emotion doesn't use React.forwardRef for creating components, so the created
-      // component stays as a function. This condition makes sure that we do not interpolate functions
-      // which are basically components used as a selectors.
-      styleArg.__emotion_real !== styleArg) {
+      } else if (
+        typeof styleArg === "function" &&
+        // On the server Emotion doesn't use React.forwardRef for creating components, so the created
+        // component stays as a function. This condition makes sure that we do not interpolate functions
+        // which are basically components used as a selectors.
+        styleArg.__emotion_real !== styleArg
+      ) {
         // If the type is function, we need to define the default theme.
-        transformedStyleArg = props => styleArg(_extends({}, props, {
-          theme: resolveTheme(_extends({}, props, {
-            defaultTheme,
-            themeId
-          }))
-        }));
+        transformedStyleArg = (props) =>
+          styleArg(
+            _extends({}, props, {
+              theme: resolveTheme(
+                _extends({}, props, {
+                  defaultTheme,
+                  themeId,
+                })
+              ),
+            })
+          );
       }
-      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
-      if (process.env.NODE_ENV !== 'production') {
+      const Component = defaultStyledResolver(
+        transformedStyleArg,
+        ...expressionsWithDefaultTheme
+      );
+      if (process.env.NODE_ENV !== "production") {
         let displayName;
         if (componentName) {
-          displayName = `${componentName}${capitalize(componentSlot || '')}`;
+          displayName = `${componentName}${capitalize(componentSlot || "")}`;
         }
         if (displayName === undefined) {
           displayName = `Styled(${getDisplayName(tag)})`;
diff --git a/modern/createStyled.js b/modern/createStyled.js
index 18de350e5f2fb98d18dfa57d1167f61acaf18e8e..db8b946affdfa19d08e06c7b34291bce92714218 100644
--- a/modern/createStyled.js
+++ b/modern/createStyled.js
@@ -1,53 +1,73 @@
 import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
 import _extends from "@babel/runtime/helpers/esm/extends";
-const _excluded = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
+const _excluded = [
+  "name",
+  "slot",
+  "skipVariantsResolver",
+  "skipSx",
+  "overridesResolver",
+];
 /* eslint-disable no-underscore-dangle */
-import styledEngineStyled, { internal_processStyles as processStyles } from '@mui/styled-engine';
-import { getDisplayName, unstable_capitalize as capitalize } from '@mui/utils';
-import createTheme from './createTheme';
-import propsToClassKey from './propsToClassKey';
-import styleFunctionSx from './styleFunctionSx';
+import styledEngineStyled, {
+  internal_processStyles as processStyles,
+} from "@mui/styled-engine";
+import { getDisplayName, unstable_capitalize as capitalize } from "@mui/utils";
+import createTheme from "./createTheme";
+import propsToClassKey from "./propsToClassKey";
+import styleFunctionSx from "./styleFunctionSx";
 function isEmpty(obj) {
   return Object.keys(obj).length === 0;
 }
 
 // https://github.com/emotion-js/emotion/blob/26ded6109fcd8ca9875cc2ce4564fee678a3f3c5/packages/styled/src/utils.js#L40
 function isStringTag(tag) {
-  return typeof tag === 'string' &&
-  // 96 is one less than the char code
-  // for "a" so this is checking that
-  // it's a lowercase character
-  tag.charCodeAt(0) > 96;
+  return (
+    typeof tag === "string" &&
+    // 96 is one less than the char code
+    // for "a" so this is checking that
+    // it's a lowercase character
+    tag.charCodeAt(0) > 96
+  );
 }
 const getStyleOverrides = (name, theme) => {
-  if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
+  if (
+    theme.components &&
+    theme.components[name] &&
+    theme.components[name].styleOverrides
+  ) {
     return theme.components[name].styleOverrides;
   }
   return null;
 };
 const getVariantStyles = (name, theme) => {
   let variants = [];
-  if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
+  if (
+    theme &&
+    theme.components &&
+    theme.components[name] &&
+    theme.components[name].variants
+  ) {
     variants = theme.components[name].variants;
   }
   const variantsStyles = {};
-  variants.forEach(definition => {
+  variants.forEach((definition) => {
     const key = propsToClassKey(definition.props);
     variantsStyles[key] = definition.style;
   });
   return variantsStyles;
 };
 const variantsResolver = (props, styles, theme, name) => {
-  const {
-    ownerState = {}
-  } = props;
+  const { ownerState = {} } = props;
   const variantsStyles = [];
   const themeVariants = theme?.components?.[name]?.variants;
   if (themeVariants) {
-    themeVariants.forEach(themeVariant => {
+    themeVariants.forEach((themeVariant) => {
       let isMatch = true;
-      Object.keys(themeVariant.props).forEach(key => {
-        if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
+      Object.keys(themeVariant.props).forEach((key) => {
+        if (
+          ownerState[key] !== themeVariant.props[key] &&
+          props[key] !== themeVariant.props[key]
+        ) {
           isMatch = false;
         }
       });
@@ -61,20 +81,18 @@ const variantsResolver = (props, styles, theme, name) => {
 
 // Update /system/styled/#api in case if this changes
 export function shouldForwardProp(prop) {
-  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
+  return (
+    prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as"
+  );
 }
 export const systemDefaultTheme = createTheme();
-const lowercaseFirstLetter = string => {
+const lowercaseFirstLetter = (string) => {
   if (!string) {
     return string;
   }
   return string.charAt(0).toLowerCase() + string.slice(1);
 };
-function resolveTheme({
-  defaultTheme,
-  theme,
-  themeId
-}) {
+function resolveTheme({ defaultTheme, theme, themeId }) {
   return isEmpty(theme) ? defaultTheme : theme[themeId] || theme;
 }
 function defaultOverridesResolver(slot) {
@@ -88,20 +106,26 @@ export default function createStyled(input = {}) {
     themeId,
     defaultTheme = systemDefaultTheme,
     rootShouldForwardProp = shouldForwardProp,
-    slotShouldForwardProp = shouldForwardProp
+    slotShouldForwardProp = shouldForwardProp,
   } = input;
-  const systemSx = props => {
-    return styleFunctionSx(_extends({}, props, {
-      theme: resolveTheme(_extends({}, props, {
-        defaultTheme,
-        themeId
-      }))
-    }));
+  const systemSx = (props) => {
+    return styleFunctionSx(
+      _extends({}, props, {
+        theme: resolveTheme(
+          _extends({}, props, {
+            defaultTheme,
+            themeId,
+          })
+        ),
+      })
+    );
   };
   systemSx.__mui_systemSx = true;
   return (tag, inputOptions = {}) => {
     // Filter out the `sx` style function from the previous styled component to prevent unnecessary styles generated by the composite components.
-    processStyles(tag, styles => styles.filter(style => !style?.__mui_systemSx));
+    processStyles(tag, (styles) =>
+      styles.filter((style) => !style?.__mui_systemSx)
+    );
     const {
         name: componentName,
         slot: componentSlot,
@@ -109,29 +133,37 @@ export default function createStyled(input = {}) {
         skipSx: inputSkipSx,
         // TODO v6: remove `lowercaseFirstLetter()` in the next major release
         // For more details: https://github.com/mui/material-ui/pull/37908
-        overridesResolver = defaultOverridesResolver(lowercaseFirstLetter(componentSlot))
+        overridesResolver = defaultOverridesResolver(
+          lowercaseFirstLetter(componentSlot)
+        ),
       } = inputOptions,
       options = _objectWithoutPropertiesLoose(inputOptions, _excluded);
 
     // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
-    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver :
-    // TODO v6: remove `Root` in the next major release
-    // For more details: https://github.com/mui/material-ui/pull/37908
-    componentSlot && componentSlot !== 'Root' && componentSlot !== 'root' || false;
+    const skipVariantsResolver =
+      inputSkipVariantsResolver !== undefined
+        ? inputSkipVariantsResolver
+        : // TODO v6: remove `Root` in the next major release
+          // For more details: https://github.com/mui/material-ui/pull/37908
+          (componentSlot &&
+            componentSlot !== "Root" &&
+            componentSlot !== "root") ||
+          false;
     const skipSx = inputSkipSx || false;
     let label;
-    if (process.env.NODE_ENV !== 'production') {
-      if (componentName) {
-        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
-        // For more details: https://github.com/mui/material-ui/pull/37908
-        label = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;
-      }
+
+    if (componentName) {
+      // TODO v6: remove `lowercaseFirstLetter()` in the next major release
+      // For more details: https://github.com/mui/material-ui/pull/37908
+      label = `${componentName}-${lowercaseFirstLetter(
+        componentSlot || "Root"
+      )}`;
     }
     let shouldForwardPropOption = shouldForwardProp;
 
     // TODO v6: remove `Root` in the next major release
     // For more details: https://github.com/mui/material-ui/pull/37908
-    if (componentSlot === 'Root' || componentSlot === 'root') {
+    if (componentSlot === "Root" || componentSlot === "root") {
       shouldForwardPropOption = rootShouldForwardProp;
     } else if (componentSlot) {
       // any other slot specified
@@ -140,38 +172,60 @@ export default function createStyled(input = {}) {
       // for string (html) tag, preserve the behavior in emotion & styled-components.
       shouldForwardPropOption = undefined;
     }
-    const defaultStyledResolver = styledEngineStyled(tag, _extends({
-      shouldForwardProp: shouldForwardPropOption,
-      label
-    }, options));
+    const defaultStyledResolver = styledEngineStyled(
+      tag,
+      _extends(
+        {
+          shouldForwardProp: shouldForwardPropOption,
+          label,
+        },
+        options
+      )
+    );
     const muiStyledResolver = (styleArg, ...expressions) => {
-      const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {
-        // On the server Emotion doesn't use React.forwardRef for creating components, so the created
-        // component stays as a function. This condition makes sure that we do not interpolate functions
-        // which are basically components used as a selectors.
-        return typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg ? props => {
-          return stylesArg(_extends({}, props, {
-            theme: resolveTheme(_extends({}, props, {
-              defaultTheme,
-              themeId
-            }))
-          }));
-        } : stylesArg;
-      }) : [];
+      const expressionsWithDefaultTheme = expressions
+        ? expressions.map((stylesArg) => {
+            // On the server Emotion doesn't use React.forwardRef for creating components, so the created
+            // component stays as a function. This condition makes sure that we do not interpolate functions
+            // which are basically components used as a selectors.
+            return typeof stylesArg === "function" &&
+              stylesArg.__emotion_real !== stylesArg
+              ? (props) => {
+                  return stylesArg(
+                    _extends({}, props, {
+                      theme: resolveTheme(
+                        _extends({}, props, {
+                          defaultTheme,
+                          themeId,
+                        })
+                      ),
+                    })
+                  );
+                }
+              : stylesArg;
+          })
+        : [];
       let transformedStyleArg = styleArg;
       if (componentName && overridesResolver) {
-        expressionsWithDefaultTheme.push(props => {
-          const theme = resolveTheme(_extends({}, props, {
-            defaultTheme,
-            themeId
-          }));
+        expressionsWithDefaultTheme.push((props) => {
+          const theme = resolveTheme(
+            _extends({}, props, {
+              defaultTheme,
+              themeId,
+            })
+          );
           const styleOverrides = getStyleOverrides(componentName, theme);
           if (styleOverrides) {
             const resolvedStyleOverrides = {};
             Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
-              resolvedStyleOverrides[slotKey] = typeof slotStyle === 'function' ? slotStyle(_extends({}, props, {
-                theme
-              })) : slotStyle;
+              resolvedStyleOverrides[slotKey] =
+                typeof slotStyle === "function"
+                  ? slotStyle(
+                      _extends({}, props, {
+                        theme,
+                      })
+                    )
+                  : slotStyle;
             });
             return overridesResolver(props, resolvedStyleOverrides);
           }
@@ -179,41 +233,59 @@ export default function createStyled(input = {}) {
         });
       }
       if (componentName && !skipVariantsResolver) {
-        expressionsWithDefaultTheme.push(props => {
-          const theme = resolveTheme(_extends({}, props, {
-            defaultTheme,
-            themeId
-          }));
-          return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
+        expressionsWithDefaultTheme.push((props) => {
+          const theme = resolveTheme(
+            _extends({}, props, {
+              defaultTheme,
+              themeId,
+            })
+          );
+          return variantsResolver(
+            props,
+            getVariantStyles(componentName, theme),
+            theme,
+            componentName
+          );
         });
       }
       if (!skipSx) {
         expressionsWithDefaultTheme.push(systemSx);
       }
-      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
+      const numOfCustomFnsApplied =
+        expressionsWithDefaultTheme.length - expressions.length;
       if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
-        const placeholders = new Array(numOfCustomFnsApplied).fill('');
+        const placeholders = new Array(numOfCustomFnsApplied).fill("");
         // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.
         transformedStyleArg = [...styleArg, ...placeholders];
         transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
-      } else if (typeof styleArg === 'function' &&
-      // On the server Emotion doesn't use React.forwardRef for creating components, so the created
-      // component stays as a function. This condition makes sure that we do not interpolate functions
-      // which are basically components used as a selectors.
-      styleArg.__emotion_real !== styleArg) {
+      } else if (
+        typeof styleArg === "function" &&
+        // On the server Emotion doesn't use React.forwardRef for creating components, so the created
+        // component stays as a function. This condition makes sure that we do not interpolate functions
+        // which are basically components used as a selectors.
+        styleArg.__emotion_real !== styleArg
+      ) {
         // If the type is function, we need to define the default theme.
-        transformedStyleArg = props => styleArg(_extends({}, props, {
-          theme: resolveTheme(_extends({}, props, {
-            defaultTheme,
-            themeId
-          }))
-        }));
+        transformedStyleArg = (props) =>
+          styleArg(
+            _extends({}, props, {
+              theme: resolveTheme(
+                _extends({}, props, {
+                  defaultTheme,
+                  themeId,
+                })
+              ),
+            })
+          );
       }
-      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
-      if (process.env.NODE_ENV !== 'production') {
+      const Component = defaultStyledResolver(
+        transformedStyleArg,
+        ...expressionsWithDefaultTheme
+      );
+      if (process.env.NODE_ENV !== "production") {
         let displayName;
         if (componentName) {
-          displayName = `${componentName}${capitalize(componentSlot || '')}`;
+          displayName = `${componentName}${capitalize(componentSlot || "")}`;
         }
         if (displayName === undefined) {
           displayName = `Styled(${getDisplayName(tag)})`;
directive @key(fields: String!) on OBJECT | INTERFACE

directive @extends on OBJECT | INTERFACE

directive @external on OBJECT | FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

"""
Date custom scalar type
"""
scalar Date

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Asset {
  id: String
  url: String
  fileName: String
  extension: String
  title: String
  width: String
  height: String
  description: String
}

type Media implements Content {
  source: String
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  title: String
  description: String
  file: Asset
  variant: String
  internalTitle: String
  asset: Media
  assetURL: String
  placeholder: Media
  fileTablet: Asset
  fileMobile: Asset
  controls: Boolean
}

type Location {
  lat: String
  lon: String
}

type RichText {
  id: String
  json: JSON
  links: RichTextLinks
}

type RichTextLinks {
  entries: [Content]
  assets: [Media]
}

type Theme implements Content {
  variant: String
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  internalTitle: String
  description: String
  components: JSON
  typography: JSON
}

type Locales {
  default: String!
  available: [String!]!
}

input ContentsFilter {
  contentTypes: [String]
  ids: [String]
  locale: String
  preview: Boolean
  displayType: String
}

type Query {
  _service: _Service!
  page(path: String!, locale: String, preview: Boolean, site: String): Content
  paths(locales: [String!], preview: Boolean, site: String): [PagePathParams!]
  content(id: String!, locale: String, preview: Boolean, displayType: String): Content
  contents(filter: ContentsFilter!): [Content]
  sitemap(root: String!, locales: [String!], preview: Boolean, site: String): Sitemap
  availableLocales: Locales
}

type _Service {
  """
  The sdl representing the federated service capabilities. Includes federation directives, removes federation types, and includes rest of full schema after schema directives have been applied
  """
  sdl: String
}

type PagePathParam {
  slug: [String!]
}

type PagePathParams {
  params: PagePathParam!
  locale: String
}

interface Content {
  id: String
  theme: [Theme]
  animation: JSON
  sidekickLookup: JSON
}

type SitemapEntry {
  loc: String
  lastmod: String
}

type SitemapPage {
  entries: [SitemapEntry]
  loc: String
  lastmod: String
  filename: String
}

type Sitemap {
  pages: [SitemapPage]
}

type Card implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  media: [Media]
  title: String
  subtitle: String
  body: RichText
  actions: [Link]
  link: Link
  pubDate: Date
}

type Collection implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  itemsVariant: String
  backgroundColor: String
  itemsWidth: String
  itemsSpacing: Int
  settings: JSON
  styles: JSON
  items: [CollectionItem]
  introText: Text
  itemsConnection(limit: Int, offset: Int, filter: CollectionFilterInput): CollectionItemConnection
}

type CommonResource implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  key: String
  shortTextValue: String
}

type Footer implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  disclaimerText: RichText
  media: [Media]
  navigationItems: [NavigationItem]
  logoLink: Link
  actions: [Link]
}

type Header implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  logo: Media
  logoUrl: String
  colorScheme: String
  logoLink: Link
  leftNav: [NavigationItem]
  rightNav: [NavigationItem]
  actions: [Link]
}

type Hero implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  title: String
  subtitle: String
  body: RichText
  image: [Media]
  backgroundColor: String
  contentWidth: String
  contentHeight: String
  background: Media
  actions: [Link]
}

type Link implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  manualUrl: String
  text: String
  icon: String
  iconPosition: String
  linkColor: String
  buttonColor: String
  requireLogin: Boolean
  href: String!
  isActive: Boolean
}

type ModuleIntegration implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  settings: JSON
}

type NavigationItem implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  manualUrl: String
  requireLogin: Boolean
  text: String
  summary: String
  media: Media
  href: String!
  className: String
  subNavigation: [SubnavigationItem]
  image: Media
}

type Section implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  anchorName: String
  backgroundColor: String
  contentDirection: String
  contentAlignment: String
  contentSpacing: Int
  contentWidth: String
  styles: JSON
  contents: [Content]
  background: Media
}

type Seo implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  name: String
  title: String
  description: String
  keywords: [String]
  no_index: Boolean
  no_follow: Boolean
}

type Site implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  siteKey: String
  seo: JSON
}

type SsoGroup implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  groupId: String
}

type Table implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  table: String
  richText: RichText
}

type Text implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  variant: String
  internalTitle: String
  body: RichText
  align: String
  styles: JSON
  color: String
  textHeader: String
  textSubheader: String
  textActions: [Link]
  colorScheme: String
}

type Article implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  slug: String
  lr__path__: String
  title: String
  featuredMedia: Media
  pubDate: Date
  summary: String
  body: RichText
  disableBackToTop: Boolean
  seo: JSON
  translatedInLocale: [String]
  salesforceOriginalHtmlForMigrationOnly: String
  salesforceIdForMigrationOnly: String
  header: Header
  footer: Content
  topicNavItems: [NavigationItem]
  categories: [Link]
  relatedLinks: [Link]
  breadcrumbs: [Link]
  breadcrumbsRoot: String
  footerItems: [Content]
  sideNav: [Link]
  link: Link
  requiredRoles: [String]
}

type CategoryArticle implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  slug: String
  lr__path__: String
  internalTitle: String
  title: String
  disableSelection: Boolean
  disableBackToTop: Boolean
  seo: JSON
  allowMultipleSections: Boolean
  header: Header
  footer: Content
  hero: Hero
  topicNavItems: [NavigationItem]
  categoryItems: [CategoryArticle]
  categoryHierarchyLinks: [NavigationItem]
  subCategories: [CategoryArticle]
  articles: [Card]
  featuredArticles: [Card]
  link: Link
  level: Int
}

type Page implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  slug: String
  lr__path__: String
  internalTitle: String
  title: String
  seo: JSON
  colorScheme: String
  disableTopicNav: Boolean
  disableBreadcrumbs: Boolean
  disableBackToTop: Boolean
  header: Header
  footer: Content
  hero: Hero
  contents: [Content]
  topicNavItems: [NavigationItem]
  breadcrumbs: [Link]
}

type PageTopic implements Content {
  sidekickLookup: JSON
  id: String
  theme: [Theme]
  animation: JSON
  slug: String
  lr__path__: String
  internalTitle: String
  title: String
  seo: JSON
  colorScheme: String
  disableBackToTop: Boolean
}

type AlgoliaObject {
  index: String!
  data: JSON!
}

type AlgoliaRecord implements Content {
  id: String
  theme: [Theme]
  animation: JSON
  sidekickLookup: JSON
  algoliaObjects: [AlgoliaObject]
}

type CollectionOptions {
  tags: [Option]
  topics: [Option]
}

type Option {
  label: String
  value: String
}

type ConnectionPageInfo {
  options: CollectionOptions
  allOptions: CollectionOptions
  total: Int
}

type CollectionItemConnection {
  pageInfo: ConnectionPageInfo
  items: [CollectionItem]
}

input CollectionFilterInput {
  topics: [String]
  tags: [String]
  body: String
}

union CollectionItem = Card | Link | Media | Section | NavigationItem

union SubnavigationItem = Link | NavigationItem

type Blog {
  header: Header
  footer: Content
}

type CategoryBlog {
  header: Header
  footer: Content
  contents: [Content]
  hero: Hero
}

type CategoryArticleLinkHierarchyNode {
  id: String
  text: String
  href: String
  subCategories: [CategoryArticleLinkHierarchyNode]
}

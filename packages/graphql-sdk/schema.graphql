directive @extends on INTERFACE | OBJECT

directive @external on FIELD_DEFINITION | OBJECT

directive @key(fields: String!) on INTERFACE | OBJECT

directive @provides(fields: String!) on FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

type AlgoliaObject {
  data: JSON!
  index: String!
}

type AlgoliaRecord implements Content {
  algoliaObjects: [AlgoliaObject]
  animation: JSON
  id: String
  sidekickLookup: JSON
  theme: [Theme]
}

type Article implements Content {
  animation: JSON
  body: RichText
  breadcrumbs: [Link]
  breadcrumbsRoot: String
  categories: [Link]
  disableBackToTop: Boolean
  driftTags: [String]
  featuredMedia: Media
  footer: Content
  footerItems: [Content]
  header: Header
  id: String
  link: Link
  lr__path__: String
  pubDate: Date
  relatedLinks: [Link]
  requiredRoles: [String]
  seo: JSON
  sideNav: [Link]
  sidekickLookup: JSON
  slug: String
  summary: String
  theme: [Theme]
  title: String
  topicNavItems: [NavigationItem]
  translatedInLocale: [String]
  variant: String
}

type Asset {
  description: String
  extension: String
  fileName: String
  height: String
  id: String
  svgContent: String
  title: String
  url: String
  width: String
}

enum Auth {
  Legacy
  None
  Okta
}

type AuthPage {
  auth: Auth
  isProtected: Boolean
  seo: JSON
}

type Blog {
  footer: Content
  header: Header
}

type Card implements Content {
  actions: [Link]
  animation: JSON
  body: RichText
  id: String
  internalTitle: String
  link: Link
  media: [Media]
  pubDate: Date
  sidekickLookup: JSON
  subtitle: String
  theme: [Theme]
  title: String
  variant: String
}

type CategoryArticle implements Content {
  allowMultipleSections: Boolean
  animation: JSON
  articles: [Card]
  categoryHierarchyLinks: [NavigationItem]
  categoryItems: [CategoryArticle]
  disableBackToTop: Boolean
  disableSelection: Boolean
  featuredArticles: [Card]
  footer: Content
  header: Header
  hero: Hero
  id: String
  internalTitle: String
  level: Int
  link: Link
  lr__path__: String
  seo: JSON
  sidekickLookup: JSON
  slug: String
  subCategories: [CategoryArticle]
  theme: [Theme]
  title: String
  topicNavItems: [NavigationItem]
}

type CategoryArticleLinkHierarchyNode {
  href: String
  id: String
  subCategories: [CategoryArticleLinkHierarchyNode]
  text: String
}

type CategoryBlog {
  contents: [Content]
  footer: Content
  header: Header
  hero: Hero
}

type Collection implements Content {
  animation: JSON
  backgroundColor: String
  id: String
  internalTitle: String
  introText: Text
  items: [CollectionItem]
  itemsConnection(filter: CollectionFilterInput, limit: Int, offset: Int): CollectionItemConnection
  itemsSpacing: Int
  itemsVariant: String
  itemsWidth: String
  settings: JSON
  sidekickLookup: JSON
  styles: JSON
  theme: [Theme]
  variant: String
}

input CollectionFilterInput {
  body: String
  tags: [String]
  topics: [String]
}

union CollectionItem = Card | Link | Media | NavigationItem | Section

type CollectionItemConnection {
  items: [CollectionItem]
  pageInfo: ConnectionPageInfo
}

type CollectionOptions {
  tags: [Option]
  topics: [Option]
}

type CommonResource implements Content {
  animation: JSON
  id: String
  image: Media
  internalTitle: String
  key: String
  media: Media
  shortTextValue: String
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

type ConnectionPageInfo {
  allOptions: CollectionOptions
  options: CollectionOptions
  total: Int
}

interface Content {
  animation: JSON
  id: String
  sidekickLookup: JSON
  theme: [Theme]
}

type ContentOwner implements Content {
  animation: JSON
  contentOwnerName: String
  id: String
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

type ContentfulAppSettings implements Content {
  animation: JSON
  id: String
  internalTitle: String
  settings: JSON
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

input ContentsFilter {
  contentTypes: [String]
  displayType: String
  ids: [String]
  locale: String
  preview: Boolean
}

"""Date custom scalar type"""
scalar Date

type Document implements Content {
  animation: JSON
  downloadUrl: String
  googleDocUrl: String
  googleId: String
  id: String
  lastUpdatedDateOfGoogleDoc: Date
  sidekickLookup: JSON
  theme: [Theme]
}

type Footer implements Content {
  actions: [Link]
  animation: JSON
  disclaimerText: RichText
  id: String
  internalTitle: String
  logoLink: Link
  media: [Media]
  navigationItems: [NavigationItem]
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

type Header implements Content {
  actions: [Link]
  animation: JSON
  colorScheme: String
  id: String
  indexName: String
  internalTitle: String
  leftNav: [NavigationItem]
  logo: Media
  logoLink: Link
  logoUrl: String
  rightNav: [NavigationItem]
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

type Hero implements Content {
  actions: [Link]
  animation: JSON
  background: Media
  backgroundColor: String
  body: RichText
  contentHeight: String
  contentWidth: String
  id: String
  image: [Media]
  internalTitle: String
  sidekickLookup: JSON
  subtitle: String
  theme: [Theme]
  title: String
  variant: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Link implements Content {
  animation: JSON
  buttonColor: String
  color: String
  href: String!
  icon: String
  iconPosition: String
  id: String
  internalTitle: String
  isActive: Boolean
  manualUrl: String
  requireLogin: Boolean
  sidekickLookup: JSON
  text: String
  theme: [Theme]
  variant: String
}

type Locales {
  available: [String!]!
  default: String!
}

type Location {
  lat: String
  lon: String
}

type Media implements Content {
  animation: JSON
  asset: Media
  assetURL: String
  controls: Boolean
  description: String
  file: Asset
  fileMobile: Asset
  fileTablet: Asset
  id: String
  internalTitle: String
  placeholder: Media
  sidekickLookup: JSON
  source: String
  theme: [Theme]
  title: String
  variant: String
}

type ModuleIntegration implements Content {
  animation: JSON
  id: String
  internalTitle: String
  settings: JSON
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

type NavigationItem implements Content {
  animation: JSON
  className: String
  href: String!
  id: String
  image: Media
  internalTitle: String
  manualUrl: String
  media: Media
  requireLogin: Boolean
  sidekickLookup: JSON
  subNavigation: [SubnavigationItem]
  summary: String
  text: String
  theme: [Theme]
  variant: String
}

type Option {
  label: String
  value: String
}

type Page implements Content {
  animation: JSON
  auth: Auth
  breadcrumbs: [Link]
  colorScheme: String
  contents: [Content]
  disableBackToTop: Boolean
  disableBreadcrumbs: Boolean
  disableTopicNav: Boolean
  footer: Content
  header: Header
  hero: Hero
  id: String
  indexName: String
  internalTitle: String
  lr__path__: String
  seo: JSON
  sidekickLookup: JSON
  slug: String
  theme: [Theme]
  title: String
  topicNavItems: [NavigationItem]
}

type PagePathParam {
  slug: [String!]
}

type PagePathParams {
  locale: String
  params: PagePathParam!
}

type PageTopic implements Content {
  animation: JSON
  colorScheme: String
  disableBackToTop: Boolean
  id: String
  internalTitle: String
  lr__path__: String
  seo: JSON
  sidekickLookup: JSON
  slug: String
  theme: [Theme]
  title: String
}

type Query {
  _service: _Service!
  authPage(locale: String, path: String!, preview: Boolean, site: String): AuthPage
  availableLocales: Locales
  content(displayType: String, id: String!, locale: String, preview: Boolean): Content
  contents(filter: ContentsFilter!): [Content]
  page(locale: String, path: String!, preview: Boolean, site: String): Content
  paths(locales: [String!], preview: Boolean, site: String): [PagePathParams!]
  sitemap(locales: [String!], preview: Boolean, root: String!, site: String): Sitemap
  sitemapIndex(preview: Boolean, site: String): Sitemap
  sitemapPage(contentType: String!, locale: String, page: Int, preview: Boolean, site: String): SitemapPage
}

type RichText {
  id: String
  json: JSON
  links: RichTextLinks
}

type RichTextLinks {
  assets: [Media]
  entries: [Content]
}

type Section implements Content {
  anchorName: String
  animation: JSON
  background: Media
  backgroundColor: String
  contentAlignment: String
  contentDirection: String
  contentSpacing: Int
  contentWidth: String
  contents: [Content]
  id: String
  internalTitle: String
  sidekickLookup: JSON
  styles: JSON
  theme: [Theme]
  variant: String
}

type Seo implements Content {
  animation: JSON
  description: String
  id: String
  keywords: [String]
  name: String
  no_follow: Boolean
  no_index: Boolean
  sidekickLookup: JSON
  theme: [Theme]
  title: String
  variant: String
}

type Site implements Content {
  animation: JSON
  id: String
  internalTitle: String
  seo: JSON
  sidekickLookup: JSON
  siteKey: String
  theme: [Theme]
  variant: String
}

type Sitemap {
  pages: [SitemapPage]
}

type SitemapEntry {
  lastmod: String
  loc: String
}

type SitemapPage {
  contentType: String
  entries: [SitemapEntry]
  filename: String
  lastmod: String
  loc: String
  locale: String
  page: Int
}

type SsoGroup implements Content {
  animation: JSON
  groupId: String
  id: String
  internalTitle: String
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

union SubnavigationItem = Link | NavigationItem

type Table implements Content {
  animation: JSON
  id: String
  internalTitle: String
  richText: RichText
  sidekickLookup: JSON
  table: String
  theme: [Theme]
  variant: String
}

type Text implements Content {
  align: String
  animation: JSON
  body: RichText
  color: String
  colorScheme: String
  id: String
  internalTitle: String
  sidekickLookup: JSON
  styles: JSON
  textActions: [Link]
  textHeader: String
  textSubheader: String
  theme: [Theme]
  variant: String
}

type Theme implements Content {
  animation: JSON
  components: JSON
  description: String
  id: String
  internalTitle: String
  sidekickLookup: JSON
  theme: [Theme]
  typography: JSON
  variant: String
}

type _Service {
  """
  The sdl representing the federated service capabilities. Includes federation directives, removes federation types, and includes rest of full schema after schema directives have been applied
  """
  sdl: String
}